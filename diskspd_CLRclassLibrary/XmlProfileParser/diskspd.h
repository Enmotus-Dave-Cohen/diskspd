#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 
namespace XmlProfileParser {
    using namespace System;
    ref class NewDataSet;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class NewDataSet : public ::System::Data::DataSet {
        public : ref class ProfileDataTable;
        public : ref class TimeSpansDataTable;
        public : ref class TimeSpanDataTable;
        public : ref class TargetsDataTable;
        public : ref class TargetDataTable;
        public : ref class WriteBufferContentDataTable;
        public : ref class RandomDataSourceDataTable;
        public : ref class ThreadTargetsDataTable;
        public : ref class ThreadTargetDataTable;
        public : ref class AffinityDataTable;
        public : ref class AffinityAssignmentDataTable;
        public : ref class AffinityGroupAssignmentDataTable;
        public : ref class ETWDataTable;
        public : ref class ProfileRow;
        public : ref class TimeSpansRow;
        public : ref class TimeSpanRow;
        public : ref class TargetsRow;
        public : ref class TargetRow;
        public : ref class WriteBufferContentRow;
        public : ref class RandomDataSourceRow;
        public : ref class ThreadTargetsRow;
        public : ref class ThreadTargetRow;
        public : ref class AffinityRow;
        public : ref class AffinityAssignmentRow;
        public : ref class AffinityGroupAssignmentRow;
        public : ref class ETWRow;
        public : ref class ProfileRowChangeEvent;
        public : ref class TimeSpansRowChangeEvent;
        public : ref class TimeSpanRowChangeEvent;
        public : ref class TargetsRowChangeEvent;
        public : ref class TargetRowChangeEvent;
        public : ref class WriteBufferContentRowChangeEvent;
        public : ref class RandomDataSourceRowChangeEvent;
        public : ref class ThreadTargetsRowChangeEvent;
        public : ref class ThreadTargetRowChangeEvent;
        public : ref class AffinityRowChangeEvent;
        public : ref class AffinityAssignmentRowChangeEvent;
        public : ref class AffinityGroupAssignmentRowChangeEvent;
        public : ref class ETWRowChangeEvent;
        
        private: XmlProfileParser::NewDataSet::ProfileDataTable^  tableProfile;
        
        private: XmlProfileParser::NewDataSet::TimeSpansDataTable^  tableTimeSpans;
        
        private: XmlProfileParser::NewDataSet::TimeSpanDataTable^  tableTimeSpan;
        
        private: XmlProfileParser::NewDataSet::TargetsDataTable^  tableTargets;
        
        private: XmlProfileParser::NewDataSet::TargetDataTable^  tableTarget;
        
        private: XmlProfileParser::NewDataSet::WriteBufferContentDataTable^  tableWriteBufferContent;
        
        private: XmlProfileParser::NewDataSet::RandomDataSourceDataTable^  tableRandomDataSource;
        
        private: XmlProfileParser::NewDataSet::ThreadTargetsDataTable^  tableThreadTargets;
        
        private: XmlProfileParser::NewDataSet::ThreadTargetDataTable^  tableThreadTarget;
        
        private: XmlProfileParser::NewDataSet::AffinityDataTable^  tableAffinity;
        
        private: XmlProfileParser::NewDataSet::AffinityAssignmentDataTable^  tableAffinityAssignment;
        
        private: XmlProfileParser::NewDataSet::AffinityGroupAssignmentDataTable^  tableAffinityGroupAssignment;
        
        private: XmlProfileParser::NewDataSet::ETWDataTable^  tableETW;
        
        private: ::System::Data::DataRelation^  relationProfile_TimeSpans;
        
        private: ::System::Data::DataRelation^  relationTimeSpans_TimeSpan;
        
        private: ::System::Data::DataRelation^  relationTimeSpan_Targets;
        
        private: ::System::Data::DataRelation^  relationTargets_Target;
        
        private: ::System::Data::DataRelation^  relationTarget_WriteBufferContent;
        
        private: ::System::Data::DataRelation^  relationWriteBufferContent_RandomDataSource;
        
        private: ::System::Data::DataRelation^  relationTarget_ThreadTargets;
        
        private: ::System::Data::DataRelation^  relationThreadTargets_ThreadTarget;
        
        private: ::System::Data::DataRelation^  relationTimeSpan_Affinity;
        
        private: ::System::Data::DataRelation^  relationAffinity_AffinityAssignment;
        
        private: ::System::Data::DataRelation^  relationAffinity_AffinityGroupAssignment;
        
        private: ::System::Data::DataRelation^  relationProfile_ETW;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ProfileRowChangeEventHandler(::System::Object^  sender, XmlProfileParser::NewDataSet::ProfileRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void TimeSpansRowChangeEventHandler(::System::Object^  sender, XmlProfileParser::NewDataSet::TimeSpansRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void TimeSpanRowChangeEventHandler(::System::Object^  sender, XmlProfileParser::NewDataSet::TimeSpanRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void TargetsRowChangeEventHandler(::System::Object^  sender, XmlProfileParser::NewDataSet::TargetsRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void TargetRowChangeEventHandler(::System::Object^  sender, XmlProfileParser::NewDataSet::TargetRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void WriteBufferContentRowChangeEventHandler(::System::Object^  sender, XmlProfileParser::NewDataSet::WriteBufferContentRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void RandomDataSourceRowChangeEventHandler(::System::Object^  sender, XmlProfileParser::NewDataSet::RandomDataSourceRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ThreadTargetsRowChangeEventHandler(::System::Object^  sender, XmlProfileParser::NewDataSet::ThreadTargetsRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ThreadTargetRowChangeEventHandler(::System::Object^  sender, XmlProfileParser::NewDataSet::ThreadTargetRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void AffinityRowChangeEventHandler(::System::Object^  sender, XmlProfileParser::NewDataSet::AffinityRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void AffinityAssignmentRowChangeEventHandler(::System::Object^  sender, XmlProfileParser::NewDataSet::AffinityAssignmentRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void AffinityGroupAssignmentRowChangeEventHandler(::System::Object^  sender, XmlProfileParser::NewDataSet::AffinityGroupAssignmentRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ETWRowChangeEventHandler(::System::Object^  sender, XmlProfileParser::NewDataSet::ETWRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XmlProfileParser::NewDataSet::ProfileDataTable^  Profile {
            XmlProfileParser::NewDataSet::ProfileDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XmlProfileParser::NewDataSet::TimeSpansDataTable^  TimeSpans {
            XmlProfileParser::NewDataSet::TimeSpansDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XmlProfileParser::NewDataSet::TimeSpanDataTable^  TimeSpan {
            XmlProfileParser::NewDataSet::TimeSpanDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XmlProfileParser::NewDataSet::TargetsDataTable^  Targets {
            XmlProfileParser::NewDataSet::TargetsDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XmlProfileParser::NewDataSet::TargetDataTable^  Target {
            XmlProfileParser::NewDataSet::TargetDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XmlProfileParser::NewDataSet::WriteBufferContentDataTable^  WriteBufferContent {
            XmlProfileParser::NewDataSet::WriteBufferContentDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XmlProfileParser::NewDataSet::RandomDataSourceDataTable^  RandomDataSource {
            XmlProfileParser::NewDataSet::RandomDataSourceDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XmlProfileParser::NewDataSet::ThreadTargetsDataTable^  ThreadTargets {
            XmlProfileParser::NewDataSet::ThreadTargetsDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XmlProfileParser::NewDataSet::ThreadTargetDataTable^  ThreadTarget {
            XmlProfileParser::NewDataSet::ThreadTargetDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XmlProfileParser::NewDataSet::AffinityDataTable^  Affinity {
            XmlProfileParser::NewDataSet::AffinityDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XmlProfileParser::NewDataSet::AffinityAssignmentDataTable^  AffinityAssignment {
            XmlProfileParser::NewDataSet::AffinityAssignmentDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XmlProfileParser::NewDataSet::AffinityGroupAssignmentDataTable^  AffinityGroupAssignment {
            XmlProfileParser::NewDataSet::AffinityGroupAssignmentDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property XmlProfileParser::NewDataSet::ETWDataTable^  ETW {
            XmlProfileParser::NewDataSet::ETWDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeProfile();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeTimeSpans();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeTimeSpan();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeTargets();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeTarget();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeWriteBufferContent();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeRandomDataSource();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeThreadTargets();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeThreadTarget();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeAffinity();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeAffinityAssignment();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeAffinityGroupAssignment();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeETW();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ProfileDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnVerbose;
            
            private: ::System::Data::DataColumn^  columnProgress;
            
            private: ::System::Data::DataColumn^  columnResultFormat;
            
            private: ::System::Data::DataColumn^  columnPrecreateFiles;
            
            private: ::System::Data::DataColumn^  columnProfile_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ProfileRowChangeEventHandler^  ProfileRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ProfileRowChangeEventHandler^  ProfileRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ProfileRowChangeEventHandler^  ProfileRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ProfileRowChangeEventHandler^  ProfileRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProfileDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProfileDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProfileDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  VerboseColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ProgressColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ResultFormatColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  PrecreateFilesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Profile_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::ProfileRow^  default [::System::Int32 ] {
                XmlProfileParser::NewDataSet::ProfileRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddProfileRow(XmlProfileParser::NewDataSet::ProfileRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::ProfileRow^  AddProfileRow(System::Boolean Verbose, System::UInt32 Progress, System::String^  ResultFormat, 
                        System::String^  PrecreateFiles);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::ProfileRow^  NewProfileRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveProfileRow(XmlProfileParser::NewDataSet::ProfileRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class TimeSpansDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnTimeSpans_Id;
            
            private: ::System::Data::DataColumn^  columnProfile_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TimeSpansRowChangeEventHandler^  TimeSpansRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TimeSpansRowChangeEventHandler^  TimeSpansRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TimeSpansRowChangeEventHandler^  TimeSpansRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TimeSpansRowChangeEventHandler^  TimeSpansRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TimeSpansDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TimeSpansDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TimeSpansDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  TimeSpans_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Profile_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::TimeSpansRow^  default [::System::Int32 ] {
                XmlProfileParser::NewDataSet::TimeSpansRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddTimeSpansRow(XmlProfileParser::NewDataSet::TimeSpansRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::TimeSpansRow^  AddTimeSpansRow(XmlProfileParser::NewDataSet::ProfileRow^  parentProfileRowByProfile_TimeSpans);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::TimeSpansRow^  NewTimeSpansRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveTimeSpansRow(XmlProfileParser::NewDataSet::TimeSpansRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class TimeSpanDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnDuration;
            
            private: ::System::Data::DataColumn^  columnWarmup;
            
            private: ::System::Data::DataColumn^  columnCooldown;
            
            private: ::System::Data::DataColumn^  columnRandSeed;
            
            private: ::System::Data::DataColumn^  columnRandomWriteData;
            
            private: ::System::Data::DataColumn^  columnThreadCount;
            
            private: ::System::Data::DataColumn^  columnRequestCount;
            
            private: ::System::Data::DataColumn^  columnGroupAffinity;
            
            private: ::System::Data::DataColumn^  columnDisableAffinity;
            
            private: ::System::Data::DataColumn^  columnCompletionRoutines;
            
            private: ::System::Data::DataColumn^  columnMeasureLatency;
            
            private: ::System::Data::DataColumn^  columnCalculateIopsStdDev;
            
            private: ::System::Data::DataColumn^  columnIoBucketDuration;
            
            private: ::System::Data::DataColumn^  columnTimeSpan_Id;
            
            private: ::System::Data::DataColumn^  columnTimeSpans_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TimeSpanRowChangeEventHandler^  TimeSpanRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TimeSpanRowChangeEventHandler^  TimeSpanRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TimeSpanRowChangeEventHandler^  TimeSpanRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TimeSpanRowChangeEventHandler^  TimeSpanRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TimeSpanDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TimeSpanDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TimeSpanDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  DurationColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  WarmupColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  CooldownColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  RandSeedColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  RandomWriteDataColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ThreadCountColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  RequestCountColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  GroupAffinityColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  DisableAffinityColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  CompletionRoutinesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  MeasureLatencyColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  CalculateIopsStdDevColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  IoBucketDurationColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  TimeSpan_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  TimeSpans_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::TimeSpanRow^  default [::System::Int32 ] {
                XmlProfileParser::NewDataSet::TimeSpanRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddTimeSpanRow(XmlProfileParser::NewDataSet::TimeSpanRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::TimeSpanRow^  AddTimeSpanRow(
                        System::UInt32 Duration, 
                        System::UInt32 Warmup, 
                        System::UInt32 Cooldown, 
                        System::UInt32 RandSeed, 
                        System::Boolean RandomWriteData, 
                        System::UInt32 ThreadCount, 
                        System::UInt32 RequestCount, 
                        System::Boolean GroupAffinity, 
                        System::Boolean DisableAffinity, 
                        System::Boolean CompletionRoutines, 
                        System::Boolean MeasureLatency, 
                        System::Boolean CalculateIopsStdDev, 
                        System::UInt32 IoBucketDuration, 
                        XmlProfileParser::NewDataSet::TimeSpansRow^  parentTimeSpansRowByTimeSpans_TimeSpan);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::TimeSpanRow^  NewTimeSpanRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveTimeSpanRow(XmlProfileParser::NewDataSet::TimeSpanRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class TargetsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnTargets_Id;
            
            private: ::System::Data::DataColumn^  columnTimeSpan_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TargetsRowChangeEventHandler^  TargetsRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TargetsRowChangeEventHandler^  TargetsRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TargetsRowChangeEventHandler^  TargetsRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TargetsRowChangeEventHandler^  TargetsRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TargetsDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TargetsDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TargetsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Targets_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  TimeSpan_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::TargetsRow^  default [::System::Int32 ] {
                XmlProfileParser::NewDataSet::TargetsRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddTargetsRow(XmlProfileParser::NewDataSet::TargetsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::TargetsRow^  AddTargetsRow(XmlProfileParser::NewDataSet::TimeSpanRow^  parentTimeSpanRowByTimeSpan_Targets);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::TargetsRow^  NewTargetsRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveTargetsRow(XmlProfileParser::NewDataSet::TargetsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class TargetDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnPath;
            
            private: ::System::Data::DataColumn^  columnBlockSize;
            
            private: ::System::Data::DataColumn^  columnStrideSize;
            
            private: ::System::Data::DataColumn^  columnInterlockedSequential;
            
            private: ::System::Data::DataColumn^  columnBaseFileOffset;
            
            private: ::System::Data::DataColumn^  columnSequentialScan;
            
            private: ::System::Data::DataColumn^  columnRandomAccess;
            
            private: ::System::Data::DataColumn^  columnTemporaryFile;
            
            private: ::System::Data::DataColumn^  columnUseLargePages;
            
            private: ::System::Data::DataColumn^  columnRequestCount;
            
            private: ::System::Data::DataColumn^  columnRandom;
            
            private: ::System::Data::DataColumn^  columnDisableAllCache;
            
            private: ::System::Data::DataColumn^  columnDisableLocalCache;
            
            private: ::System::Data::DataColumn^  columnDisableOSCache;
            
            private: ::System::Data::DataColumn^  columnWriteThrough;
            
            private: ::System::Data::DataColumn^  columnMemoryMappedIo;
            
            private: ::System::Data::DataColumn^  columnFlushType;
            
            private: ::System::Data::DataColumn^  columnBurstSize;
            
            private: ::System::Data::DataColumn^  columnThinkTime;
            
            private: ::System::Data::DataColumn^  columnThroughput;
            
            private: ::System::Data::DataColumn^  columnThreadsPerFile;
            
            private: ::System::Data::DataColumn^  columnFileSize;
            
            private: ::System::Data::DataColumn^  columnMaxFileSize;
            
            private: ::System::Data::DataColumn^  columnWriteRatio;
            
            private: ::System::Data::DataColumn^  columnParallelAsyncIO;
            
            private: ::System::Data::DataColumn^  columnThreadStride;
            
            private: ::System::Data::DataColumn^  columnIOPriority;
            
            private: ::System::Data::DataColumn^  columnWeight;
            
            private: ::System::Data::DataColumn^  columnTarget_Id;
            
            private: ::System::Data::DataColumn^  columnTargets_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TargetRowChangeEventHandler^  TargetRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TargetRowChangeEventHandler^  TargetRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TargetRowChangeEventHandler^  TargetRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::TargetRowChangeEventHandler^  TargetRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TargetDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TargetDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TargetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  PathColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  BlockSizeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  StrideSizeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  InterlockedSequentialColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  BaseFileOffsetColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  SequentialScanColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  RandomAccessColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  TemporaryFileColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  UseLargePagesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  RequestCountColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  RandomColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  DisableAllCacheColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  DisableLocalCacheColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  DisableOSCacheColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  WriteThroughColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  MemoryMappedIoColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  FlushTypeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  BurstSizeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ThinkTimeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ThroughputColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ThreadsPerFileColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  FileSizeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  MaxFileSizeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  WriteRatioColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ParallelAsyncIOColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ThreadStrideColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  IOPriorityColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  WeightColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Target_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Targets_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::TargetRow^  default [::System::Int32 ] {
                XmlProfileParser::NewDataSet::TargetRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddTargetRow(XmlProfileParser::NewDataSet::TargetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::TargetRow^  AddTargetRow(
                        System::String^  Path, 
                        System::UInt32 BlockSize, 
                        System::UInt64 StrideSize, 
                        System::Boolean InterlockedSequential, 
                        System::UInt64 BaseFileOffset, 
                        System::Boolean SequentialScan, 
                        System::Boolean RandomAccess, 
                        System::Boolean TemporaryFile, 
                        System::Boolean UseLargePages, 
                        System::UInt32 RequestCount, 
                        System::UInt64 Random, 
                        System::Boolean DisableAllCache, 
                        System::Boolean DisableLocalCache, 
                        System::Boolean DisableOSCache, 
                        System::Boolean WriteThrough, 
                        System::Boolean MemoryMappedIo, 
                        System::String^  FlushType, 
                        System::UInt32 BurstSize, 
                        System::UInt32 ThinkTime, 
                        System::UInt32 Throughput, 
                        System::UInt32 ThreadsPerFile, 
                        System::UInt64 FileSize, 
                        System::UInt64 MaxFileSize, 
                        System::UInt32 WriteRatio, 
                        System::Boolean ParallelAsyncIO, 
                        System::UInt64 ThreadStride, 
                        System::UInt32 IOPriority, 
                        System::UInt32 Weight, 
                        XmlProfileParser::NewDataSet::TargetsRow^  parentTargetsRowByTargets_Target);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::TargetRow^  NewTargetRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveTargetRow(XmlProfileParser::NewDataSet::TargetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class WriteBufferContentDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnPattern;
            
            private: ::System::Data::DataColumn^  columnWriteBufferContent_Id;
            
            private: ::System::Data::DataColumn^  columnTarget_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::WriteBufferContentRowChangeEventHandler^  WriteBufferContentRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::WriteBufferContentRowChangeEventHandler^  WriteBufferContentRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::WriteBufferContentRowChangeEventHandler^  WriteBufferContentRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::WriteBufferContentRowChangeEventHandler^  WriteBufferContentRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WriteBufferContentDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WriteBufferContentDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WriteBufferContentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  PatternColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  WriteBufferContent_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Target_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::WriteBufferContentRow^  default [::System::Int32 ] {
                XmlProfileParser::NewDataSet::WriteBufferContentRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddWriteBufferContentRow(XmlProfileParser::NewDataSet::WriteBufferContentRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::WriteBufferContentRow^  AddWriteBufferContentRow(System::String^  Pattern, XmlProfileParser::NewDataSet::TargetRow^  parentTargetRowByTarget_WriteBufferContent);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::WriteBufferContentRow^  NewWriteBufferContentRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveWriteBufferContentRow(XmlProfileParser::NewDataSet::WriteBufferContentRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class RandomDataSourceDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnSizeInBytes;
            
            private: ::System::Data::DataColumn^  columnFilePath;
            
            private: ::System::Data::DataColumn^  columnWriteBufferContent_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::RandomDataSourceRowChangeEventHandler^  RandomDataSourceRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::RandomDataSourceRowChangeEventHandler^  RandomDataSourceRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::RandomDataSourceRowChangeEventHandler^  RandomDataSourceRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::RandomDataSourceRowChangeEventHandler^  RandomDataSourceRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            RandomDataSourceDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            RandomDataSourceDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            RandomDataSourceDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  SizeInBytesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  FilePathColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  WriteBufferContent_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::RandomDataSourceRow^  default [::System::Int32 ] {
                XmlProfileParser::NewDataSet::RandomDataSourceRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddRandomDataSourceRow(XmlProfileParser::NewDataSet::RandomDataSourceRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::RandomDataSourceRow^  AddRandomDataSourceRow(System::UInt64 SizeInBytes, System::String^  FilePath, 
                        XmlProfileParser::NewDataSet::WriteBufferContentRow^  parentWriteBufferContentRowByWriteBufferContent_RandomDataSource);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::RandomDataSourceRow^  NewRandomDataSourceRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveRandomDataSourceRow(XmlProfileParser::NewDataSet::RandomDataSourceRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ThreadTargetsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnThreadTargets_Id;
            
            private: ::System::Data::DataColumn^  columnTarget_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ThreadTargetsRowChangeEventHandler^  ThreadTargetsRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ThreadTargetsRowChangeEventHandler^  ThreadTargetsRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ThreadTargetsRowChangeEventHandler^  ThreadTargetsRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ThreadTargetsRowChangeEventHandler^  ThreadTargetsRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ThreadTargetsDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ThreadTargetsDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ThreadTargetsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ThreadTargets_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Target_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::ThreadTargetsRow^  default [::System::Int32 ] {
                XmlProfileParser::NewDataSet::ThreadTargetsRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddThreadTargetsRow(XmlProfileParser::NewDataSet::ThreadTargetsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::ThreadTargetsRow^  AddThreadTargetsRow(XmlProfileParser::NewDataSet::TargetRow^  parentTargetRowByTarget_ThreadTargets);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::ThreadTargetsRow^  NewThreadTargetsRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveThreadTargetsRow(XmlProfileParser::NewDataSet::ThreadTargetsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ThreadTargetDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnThread;
            
            private: ::System::Data::DataColumn^  columnWeight;
            
            private: ::System::Data::DataColumn^  columnThreadTargets_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ThreadTargetRowChangeEventHandler^  ThreadTargetRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ThreadTargetRowChangeEventHandler^  ThreadTargetRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ThreadTargetRowChangeEventHandler^  ThreadTargetRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ThreadTargetRowChangeEventHandler^  ThreadTargetRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ThreadTargetDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ThreadTargetDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ThreadTargetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ThreadColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  WeightColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ThreadTargets_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::ThreadTargetRow^  default [::System::Int32 ] {
                XmlProfileParser::NewDataSet::ThreadTargetRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddThreadTargetRow(XmlProfileParser::NewDataSet::ThreadTargetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::ThreadTargetRow^  AddThreadTargetRow(System::UInt32 Thread, System::UInt32 Weight, 
                        XmlProfileParser::NewDataSet::ThreadTargetsRow^  parentThreadTargetsRowByThreadTargets_ThreadTarget);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::ThreadTargetRow^  NewThreadTargetRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveThreadTargetRow(XmlProfileParser::NewDataSet::ThreadTargetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class AffinityDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnAffinity_Id;
            
            private: ::System::Data::DataColumn^  columnTimeSpan_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::AffinityRowChangeEventHandler^  AffinityRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::AffinityRowChangeEventHandler^  AffinityRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::AffinityRowChangeEventHandler^  AffinityRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::AffinityRowChangeEventHandler^  AffinityRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AffinityDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AffinityDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AffinityDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Affinity_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  TimeSpan_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::AffinityRow^  default [::System::Int32 ] {
                XmlProfileParser::NewDataSet::AffinityRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddAffinityRow(XmlProfileParser::NewDataSet::AffinityRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::AffinityRow^  AddAffinityRow(XmlProfileParser::NewDataSet::TimeSpanRow^  parentTimeSpanRowByTimeSpan_Affinity);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::AffinityRow^  NewAffinityRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveAffinityRow(XmlProfileParser::NewDataSet::AffinityRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class AffinityAssignmentDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnAffinityAssignment_Column;
            
            private: ::System::Data::DataColumn^  columnAffinity_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::AffinityAssignmentRowChangeEventHandler^  AffinityAssignmentRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::AffinityAssignmentRowChangeEventHandler^  AffinityAssignmentRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::AffinityAssignmentRowChangeEventHandler^  AffinityAssignmentRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::AffinityAssignmentRowChangeEventHandler^  AffinityAssignmentRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AffinityAssignmentDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AffinityAssignmentDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AffinityAssignmentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  AffinityAssignment_ColumnColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Affinity_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::AffinityAssignmentRow^  default [::System::Int32 ] {
                XmlProfileParser::NewDataSet::AffinityAssignmentRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddAffinityAssignmentRow(XmlProfileParser::NewDataSet::AffinityAssignmentRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::AffinityAssignmentRow^  AddAffinityAssignmentRow(System::UInt32 AffinityAssignment_Column, 
                        XmlProfileParser::NewDataSet::AffinityRow^  parentAffinityRowByAffinity_AffinityAssignment);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::AffinityAssignmentRow^  NewAffinityAssignmentRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveAffinityAssignmentRow(XmlProfileParser::NewDataSet::AffinityAssignmentRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class AffinityGroupAssignmentDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnGroup;
            
            private: ::System::Data::DataColumn^  columnProcessor;
            
            private: ::System::Data::DataColumn^  columnAffinity_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::AffinityGroupAssignmentRowChangeEventHandler^  AffinityGroupAssignmentRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::AffinityGroupAssignmentRowChangeEventHandler^  AffinityGroupAssignmentRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::AffinityGroupAssignmentRowChangeEventHandler^  AffinityGroupAssignmentRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::AffinityGroupAssignmentRowChangeEventHandler^  AffinityGroupAssignmentRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AffinityGroupAssignmentDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AffinityGroupAssignmentDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AffinityGroupAssignmentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  GroupColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ProcessorColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Affinity_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  default [::System::Int32 ] {
                XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddAffinityGroupAssignmentRow(XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  AddAffinityGroupAssignmentRow(System::UInt32 Group, 
                        System::UInt32 Processor, XmlProfileParser::NewDataSet::AffinityRow^  parentAffinityRowByAffinity_AffinityGroupAssignment);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  NewAffinityGroupAssignmentRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveAffinityGroupAssignmentRow(XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ETWDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnProcess;
            
            private: ::System::Data::DataColumn^  columnThread;
            
            private: ::System::Data::DataColumn^  columnImageLoad;
            
            private: ::System::Data::DataColumn^  columnDiskIO;
            
            private: ::System::Data::DataColumn^  columnMemoryPageFaults;
            
            private: ::System::Data::DataColumn^  columnMemoryHardFaults;
            
            private: ::System::Data::DataColumn^  columnNetwork;
            
            private: ::System::Data::DataColumn^  columnRegistry;
            
            private: ::System::Data::DataColumn^  columnUsePagedMemory;
            
            private: ::System::Data::DataColumn^  columnUsePerfTimer;
            
            private: ::System::Data::DataColumn^  columnUseSystemTimer;
            
            private: ::System::Data::DataColumn^  columnUseCyclesCounter;
            
            private: ::System::Data::DataColumn^  columnProfile_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ETWRowChangeEventHandler^  ETWRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ETWRowChangeEventHandler^  ETWRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ETWRowChangeEventHandler^  ETWRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event XmlProfileParser::NewDataSet::ETWRowChangeEventHandler^  ETWRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ETWDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ETWDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ETWDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ProcessColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ThreadColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ImageLoadColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  DiskIOColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  MemoryPageFaultsColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  MemoryHardFaultsColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  NetworkColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  RegistryColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  UsePagedMemoryColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  UsePerfTimerColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  UseSystemTimerColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  UseCyclesCounterColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Profile_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::ETWRow^  default [::System::Int32 ] {
                XmlProfileParser::NewDataSet::ETWRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddETWRow(XmlProfileParser::NewDataSet::ETWRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::ETWRow^  AddETWRow(
                        System::Boolean Process, 
                        System::Boolean Thread, 
                        System::Boolean ImageLoad, 
                        System::Boolean DiskIO, 
                        System::Boolean MemoryPageFaults, 
                        System::Boolean MemoryHardFaults, 
                        System::Boolean Network, 
                        System::Boolean Registry, 
                        System::Boolean UsePagedMemory, 
                        System::Boolean UsePerfTimer, 
                        System::Boolean UseSystemTimer, 
                        System::Boolean UseCyclesCounter, 
                        XmlProfileParser::NewDataSet::ProfileRow^  parentProfileRowByProfile_ETW);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            XmlProfileParser::NewDataSet::ETWRow^  NewETWRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveETWRow(XmlProfileParser::NewDataSet::ETWRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ProfileRow : public ::System::Data::DataRow {
            
            private: XmlProfileParser::NewDataSet::ProfileDataTable^  tableProfile;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProfileRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean Verbose {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 Progress {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  ResultFormat {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  PrecreateFiles {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Profile_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsVerboseNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetVerboseNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsProgressNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetProgressNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsResultFormatNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetResultFormatNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsPrecreateFilesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetPrecreateFilesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< XmlProfileParser::NewDataSet::TimeSpansRow^  >^  GetTimeSpansRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< XmlProfileParser::NewDataSet::ETWRow^  >^  GetETWRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class TimeSpansRow : public ::System::Data::DataRow {
            
            private: XmlProfileParser::NewDataSet::TimeSpansDataTable^  tableTimeSpans;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TimeSpansRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 TimeSpans_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Profile_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::ProfileRow^  ProfileRow {
                XmlProfileParser::NewDataSet::ProfileRow^  get();
                System::Void set(XmlProfileParser::NewDataSet::ProfileRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsProfile_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetProfile_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< XmlProfileParser::NewDataSet::TimeSpanRow^  >^  GetTimeSpanRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class TimeSpanRow : public ::System::Data::DataRow {
            
            private: XmlProfileParser::NewDataSet::TimeSpanDataTable^  tableTimeSpan;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TimeSpanRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 Duration {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 Warmup {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 Cooldown {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 RandSeed {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean RandomWriteData {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 ThreadCount {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 RequestCount {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean GroupAffinity {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean DisableAffinity {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean CompletionRoutines {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean MeasureLatency {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean CalculateIopsStdDev {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 IoBucketDuration {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 TimeSpan_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 TimeSpans_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::TimeSpansRow^  TimeSpansRow {
                XmlProfileParser::NewDataSet::TimeSpansRow^  get();
                System::Void set(XmlProfileParser::NewDataSet::TimeSpansRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsDurationNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetDurationNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsWarmupNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetWarmupNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsCooldownNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetCooldownNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsRandSeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetRandSeedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsRandomWriteDataNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetRandomWriteDataNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsThreadCountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetThreadCountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsRequestCountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetRequestCountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsGroupAffinityNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetGroupAffinityNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsDisableAffinityNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetDisableAffinityNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsCompletionRoutinesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetCompletionRoutinesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsMeasureLatencyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetMeasureLatencyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsCalculateIopsStdDevNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetCalculateIopsStdDevNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsIoBucketDurationNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetIoBucketDurationNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsTimeSpans_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetTimeSpans_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< XmlProfileParser::NewDataSet::TargetsRow^  >^  GetTargetsRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< XmlProfileParser::NewDataSet::AffinityRow^  >^  GetAffinityRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class TargetsRow : public ::System::Data::DataRow {
            
            private: XmlProfileParser::NewDataSet::TargetsDataTable^  tableTargets;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TargetsRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Targets_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 TimeSpan_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::TimeSpanRow^  TimeSpanRow {
                XmlProfileParser::NewDataSet::TimeSpanRow^  get();
                System::Void set(XmlProfileParser::NewDataSet::TimeSpanRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsTimeSpan_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetTimeSpan_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< XmlProfileParser::NewDataSet::TargetRow^  >^  GetTargetRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class TargetRow : public ::System::Data::DataRow {
            
            private: XmlProfileParser::NewDataSet::TargetDataTable^  tableTarget;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TargetRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Path {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 BlockSize {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt64 StrideSize {
                System::UInt64 get();
                System::Void set(System::UInt64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean InterlockedSequential {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt64 BaseFileOffset {
                System::UInt64 get();
                System::Void set(System::UInt64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean SequentialScan {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean RandomAccess {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean TemporaryFile {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean UseLargePages {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 RequestCount {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt64 Random {
                System::UInt64 get();
                System::Void set(System::UInt64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean DisableAllCache {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean DisableLocalCache {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean DisableOSCache {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean WriteThrough {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean MemoryMappedIo {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  FlushType {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 BurstSize {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 ThinkTime {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 Throughput {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 ThreadsPerFile {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt64 FileSize {
                System::UInt64 get();
                System::Void set(System::UInt64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt64 MaxFileSize {
                System::UInt64 get();
                System::Void set(System::UInt64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 WriteRatio {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean ParallelAsyncIO {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt64 ThreadStride {
                System::UInt64 get();
                System::Void set(System::UInt64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 IOPriority {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 Weight {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Target_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Targets_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::TargetsRow^  TargetsRow {
                XmlProfileParser::NewDataSet::TargetsRow^  get();
                System::Void set(XmlProfileParser::NewDataSet::TargetsRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsBlockSizeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetBlockSizeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsStrideSizeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetStrideSizeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsInterlockedSequentialNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetInterlockedSequentialNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsBaseFileOffsetNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetBaseFileOffsetNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsSequentialScanNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetSequentialScanNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsRandomAccessNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetRandomAccessNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsTemporaryFileNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetTemporaryFileNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsUseLargePagesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetUseLargePagesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsRequestCountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetRequestCountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsRandomNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetRandomNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsDisableAllCacheNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetDisableAllCacheNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsDisableLocalCacheNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetDisableLocalCacheNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsDisableOSCacheNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetDisableOSCacheNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsWriteThroughNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetWriteThroughNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsMemoryMappedIoNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetMemoryMappedIoNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsFlushTypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetFlushTypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsBurstSizeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetBurstSizeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsThinkTimeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetThinkTimeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsThroughputNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetThroughputNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsThreadsPerFileNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetThreadsPerFileNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsFileSizeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetFileSizeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsMaxFileSizeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetMaxFileSizeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsWriteRatioNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetWriteRatioNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsParallelAsyncIONull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetParallelAsyncIONull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsThreadStrideNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetThreadStrideNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsIOPriorityNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetIOPriorityNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsWeightNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetWeightNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsTargets_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetTargets_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< XmlProfileParser::NewDataSet::WriteBufferContentRow^  >^  GetWriteBufferContentRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< XmlProfileParser::NewDataSet::ThreadTargetsRow^  >^  GetThreadTargetsRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class WriteBufferContentRow : public ::System::Data::DataRow {
            
            private: XmlProfileParser::NewDataSet::WriteBufferContentDataTable^  tableWriteBufferContent;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WriteBufferContentRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Pattern {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 WriteBufferContent_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Target_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::TargetRow^  TargetRow {
                XmlProfileParser::NewDataSet::TargetRow^  get();
                System::Void set(XmlProfileParser::NewDataSet::TargetRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsTarget_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetTarget_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< XmlProfileParser::NewDataSet::RandomDataSourceRow^  >^  GetRandomDataSourceRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class RandomDataSourceRow : public ::System::Data::DataRow {
            
            private: XmlProfileParser::NewDataSet::RandomDataSourceDataTable^  tableRandomDataSource;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            RandomDataSourceRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt64 SizeInBytes {
                System::UInt64 get();
                System::Void set(System::UInt64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  FilePath {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 WriteBufferContent_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::WriteBufferContentRow^  WriteBufferContentRow {
                XmlProfileParser::NewDataSet::WriteBufferContentRow^  get();
                System::Void set(XmlProfileParser::NewDataSet::WriteBufferContentRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsFilePathNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetFilePathNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsWriteBufferContent_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetWriteBufferContent_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ThreadTargetsRow : public ::System::Data::DataRow {
            
            private: XmlProfileParser::NewDataSet::ThreadTargetsDataTable^  tableThreadTargets;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ThreadTargetsRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 ThreadTargets_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Target_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::TargetRow^  TargetRow {
                XmlProfileParser::NewDataSet::TargetRow^  get();
                System::Void set(XmlProfileParser::NewDataSet::TargetRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsTarget_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetTarget_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< XmlProfileParser::NewDataSet::ThreadTargetRow^  >^  GetThreadTargetRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ThreadTargetRow : public ::System::Data::DataRow {
            
            private: XmlProfileParser::NewDataSet::ThreadTargetDataTable^  tableThreadTarget;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ThreadTargetRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 Thread {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 Weight {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 ThreadTargets_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::ThreadTargetsRow^  ThreadTargetsRow {
                XmlProfileParser::NewDataSet::ThreadTargetsRow^  get();
                System::Void set(XmlProfileParser::NewDataSet::ThreadTargetsRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsWeightNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetWeightNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsThreadTargets_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetThreadTargets_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class AffinityRow : public ::System::Data::DataRow {
            
            private: XmlProfileParser::NewDataSet::AffinityDataTable^  tableAffinity;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AffinityRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Affinity_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 TimeSpan_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::TimeSpanRow^  TimeSpanRow {
                XmlProfileParser::NewDataSet::TimeSpanRow^  get();
                System::Void set(XmlProfileParser::NewDataSet::TimeSpanRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsTimeSpan_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetTimeSpan_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< XmlProfileParser::NewDataSet::AffinityAssignmentRow^  >^  GetAffinityAssignmentRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  >^  GetAffinityGroupAssignmentRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class AffinityAssignmentRow : public ::System::Data::DataRow {
            
            private: XmlProfileParser::NewDataSet::AffinityAssignmentDataTable^  tableAffinityAssignment;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AffinityAssignmentRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 AffinityAssignment_Column {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Affinity_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::AffinityRow^  AffinityRow {
                XmlProfileParser::NewDataSet::AffinityRow^  get();
                System::Void set(XmlProfileParser::NewDataSet::AffinityRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsAffinity_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetAffinity_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class AffinityGroupAssignmentRow : public ::System::Data::DataRow {
            
            private: XmlProfileParser::NewDataSet::AffinityGroupAssignmentDataTable^  tableAffinityGroupAssignment;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AffinityGroupAssignmentRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 Group {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::UInt32 Processor {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Affinity_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::AffinityRow^  AffinityRow {
                XmlProfileParser::NewDataSet::AffinityRow^  get();
                System::Void set(XmlProfileParser::NewDataSet::AffinityRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsGroupNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetGroupNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsProcessorNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetProcessorNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsAffinity_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetAffinity_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ETWRow : public ::System::Data::DataRow {
            
            private: XmlProfileParser::NewDataSet::ETWDataTable^  tableETW;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ETWRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean Process {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean Thread {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean ImageLoad {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean DiskIO {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean MemoryPageFaults {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean MemoryHardFaults {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean Network {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean Registry {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean UsePagedMemory {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean UsePerfTimer {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean UseSystemTimer {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Boolean UseCyclesCounter {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Profile_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::ProfileRow^  ProfileRow {
                XmlProfileParser::NewDataSet::ProfileRow^  get();
                System::Void set(XmlProfileParser::NewDataSet::ProfileRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsProcessNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetProcessNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsThreadNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetThreadNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsImageLoadNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetImageLoadNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsDiskIONull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetDiskIONull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsMemoryPageFaultsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetMemoryPageFaultsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsMemoryHardFaultsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetMemoryHardFaultsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsNetworkNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetNetworkNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsRegistryNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetRegistryNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsUsePagedMemoryNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetUsePagedMemoryNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsUsePerfTimerNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetUsePerfTimerNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsUseSystemTimerNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetUseSystemTimerNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsUseCyclesCounterNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetUseCyclesCounterNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsProfile_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetProfile_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ProfileRowChangeEvent : public ::System::EventArgs {
            
            private: XmlProfileParser::NewDataSet::ProfileRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProfileRowChangeEvent(XmlProfileParser::NewDataSet::ProfileRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::ProfileRow^  Row {
                XmlProfileParser::NewDataSet::ProfileRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class TimeSpansRowChangeEvent : public ::System::EventArgs {
            
            private: XmlProfileParser::NewDataSet::TimeSpansRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TimeSpansRowChangeEvent(XmlProfileParser::NewDataSet::TimeSpansRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::TimeSpansRow^  Row {
                XmlProfileParser::NewDataSet::TimeSpansRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class TimeSpanRowChangeEvent : public ::System::EventArgs {
            
            private: XmlProfileParser::NewDataSet::TimeSpanRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TimeSpanRowChangeEvent(XmlProfileParser::NewDataSet::TimeSpanRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::TimeSpanRow^  Row {
                XmlProfileParser::NewDataSet::TimeSpanRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class TargetsRowChangeEvent : public ::System::EventArgs {
            
            private: XmlProfileParser::NewDataSet::TargetsRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TargetsRowChangeEvent(XmlProfileParser::NewDataSet::TargetsRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::TargetsRow^  Row {
                XmlProfileParser::NewDataSet::TargetsRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class TargetRowChangeEvent : public ::System::EventArgs {
            
            private: XmlProfileParser::NewDataSet::TargetRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TargetRowChangeEvent(XmlProfileParser::NewDataSet::TargetRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::TargetRow^  Row {
                XmlProfileParser::NewDataSet::TargetRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class WriteBufferContentRowChangeEvent : public ::System::EventArgs {
            
            private: XmlProfileParser::NewDataSet::WriteBufferContentRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            WriteBufferContentRowChangeEvent(XmlProfileParser::NewDataSet::WriteBufferContentRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::WriteBufferContentRow^  Row {
                XmlProfileParser::NewDataSet::WriteBufferContentRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class RandomDataSourceRowChangeEvent : public ::System::EventArgs {
            
            private: XmlProfileParser::NewDataSet::RandomDataSourceRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            RandomDataSourceRowChangeEvent(XmlProfileParser::NewDataSet::RandomDataSourceRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::RandomDataSourceRow^  Row {
                XmlProfileParser::NewDataSet::RandomDataSourceRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ThreadTargetsRowChangeEvent : public ::System::EventArgs {
            
            private: XmlProfileParser::NewDataSet::ThreadTargetsRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ThreadTargetsRowChangeEvent(XmlProfileParser::NewDataSet::ThreadTargetsRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::ThreadTargetsRow^  Row {
                XmlProfileParser::NewDataSet::ThreadTargetsRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ThreadTargetRowChangeEvent : public ::System::EventArgs {
            
            private: XmlProfileParser::NewDataSet::ThreadTargetRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ThreadTargetRowChangeEvent(XmlProfileParser::NewDataSet::ThreadTargetRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::ThreadTargetRow^  Row {
                XmlProfileParser::NewDataSet::ThreadTargetRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class AffinityRowChangeEvent : public ::System::EventArgs {
            
            private: XmlProfileParser::NewDataSet::AffinityRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AffinityRowChangeEvent(XmlProfileParser::NewDataSet::AffinityRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::AffinityRow^  Row {
                XmlProfileParser::NewDataSet::AffinityRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class AffinityAssignmentRowChangeEvent : public ::System::EventArgs {
            
            private: XmlProfileParser::NewDataSet::AffinityAssignmentRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AffinityAssignmentRowChangeEvent(XmlProfileParser::NewDataSet::AffinityAssignmentRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::AffinityAssignmentRow^  Row {
                XmlProfileParser::NewDataSet::AffinityAssignmentRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class AffinityGroupAssignmentRowChangeEvent : public ::System::EventArgs {
            
            private: XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AffinityGroupAssignmentRowChangeEvent(XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  Row {
                XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ETWRowChangeEvent : public ::System::EventArgs {
            
            private: XmlProfileParser::NewDataSet::ETWRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ETWRowChangeEvent(XmlProfileParser::NewDataSet::ETWRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property XmlProfileParser::NewDataSet::ETWRow^  Row {
                XmlProfileParser::NewDataSet::ETWRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace XmlProfileParser {
    
    
    inline NewDataSet::NewDataSet() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &XmlProfileParser::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &XmlProfileParser::NewDataSet::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"Profile"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::ProfileDataTable(ds->Tables[L"Profile"])));
            }
            if (ds->Tables[L"TimeSpans"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::TimeSpansDataTable(ds->Tables[L"TimeSpans"])));
            }
            if (ds->Tables[L"TimeSpan"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::TimeSpanDataTable(ds->Tables[L"TimeSpan"])));
            }
            if (ds->Tables[L"Targets"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::TargetsDataTable(ds->Tables[L"Targets"])));
            }
            if (ds->Tables[L"Target"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::TargetDataTable(ds->Tables[L"Target"])));
            }
            if (ds->Tables[L"WriteBufferContent"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::WriteBufferContentDataTable(ds->Tables[L"WriteBufferContent"])));
            }
            if (ds->Tables[L"RandomDataSource"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::RandomDataSourceDataTable(ds->Tables[L"RandomDataSource"])));
            }
            if (ds->Tables[L"ThreadTargets"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::ThreadTargetsDataTable(ds->Tables[L"ThreadTargets"])));
            }
            if (ds->Tables[L"ThreadTarget"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::ThreadTargetDataTable(ds->Tables[L"ThreadTarget"])));
            }
            if (ds->Tables[L"Affinity"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::AffinityDataTable(ds->Tables[L"Affinity"])));
            }
            if (ds->Tables[L"AffinityAssignment"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::AffinityAssignmentDataTable(ds->Tables[L"AffinityAssignment"])));
            }
            if (ds->Tables[L"AffinityGroupAssignment"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::AffinityGroupAssignmentDataTable(ds->Tables[L"AffinityGroupAssignment"])));
            }
            if (ds->Tables[L"ETW"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::ETWDataTable(ds->Tables[L"ETW"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &XmlProfileParser::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline XmlProfileParser::NewDataSet::ProfileDataTable^  NewDataSet::Profile::get() {
        return this->tableProfile;
    }
    
    inline XmlProfileParser::NewDataSet::TimeSpansDataTable^  NewDataSet::TimeSpans::get() {
        return this->tableTimeSpans;
    }
    
    inline XmlProfileParser::NewDataSet::TimeSpanDataTable^  NewDataSet::TimeSpan::get() {
        return this->tableTimeSpan;
    }
    
    inline XmlProfileParser::NewDataSet::TargetsDataTable^  NewDataSet::Targets::get() {
        return this->tableTargets;
    }
    
    inline XmlProfileParser::NewDataSet::TargetDataTable^  NewDataSet::Target::get() {
        return this->tableTarget;
    }
    
    inline XmlProfileParser::NewDataSet::WriteBufferContentDataTable^  NewDataSet::WriteBufferContent::get() {
        return this->tableWriteBufferContent;
    }
    
    inline XmlProfileParser::NewDataSet::RandomDataSourceDataTable^  NewDataSet::RandomDataSource::get() {
        return this->tableRandomDataSource;
    }
    
    inline XmlProfileParser::NewDataSet::ThreadTargetsDataTable^  NewDataSet::ThreadTargets::get() {
        return this->tableThreadTargets;
    }
    
    inline XmlProfileParser::NewDataSet::ThreadTargetDataTable^  NewDataSet::ThreadTarget::get() {
        return this->tableThreadTarget;
    }
    
    inline XmlProfileParser::NewDataSet::AffinityDataTable^  NewDataSet::Affinity::get() {
        return this->tableAffinity;
    }
    
    inline XmlProfileParser::NewDataSet::AffinityAssignmentDataTable^  NewDataSet::AffinityAssignment::get() {
        return this->tableAffinityAssignment;
    }
    
    inline XmlProfileParser::NewDataSet::AffinityGroupAssignmentDataTable^  NewDataSet::AffinityGroupAssignment::get() {
        return this->tableAffinityGroupAssignment;
    }
    
    inline XmlProfileParser::NewDataSet::ETWDataTable^  NewDataSet::ETW::get() {
        return this->tableETW;
    }
    
    inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  NewDataSet::Clone() {
        XmlProfileParser::NewDataSet^  cln = (cli::safe_cast<XmlProfileParser::NewDataSet^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"Profile"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::ProfileDataTable(ds->Tables[L"Profile"])));
            }
            if (ds->Tables[L"TimeSpans"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::TimeSpansDataTable(ds->Tables[L"TimeSpans"])));
            }
            if (ds->Tables[L"TimeSpan"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::TimeSpanDataTable(ds->Tables[L"TimeSpan"])));
            }
            if (ds->Tables[L"Targets"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::TargetsDataTable(ds->Tables[L"Targets"])));
            }
            if (ds->Tables[L"Target"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::TargetDataTable(ds->Tables[L"Target"])));
            }
            if (ds->Tables[L"WriteBufferContent"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::WriteBufferContentDataTable(ds->Tables[L"WriteBufferContent"])));
            }
            if (ds->Tables[L"RandomDataSource"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::RandomDataSourceDataTable(ds->Tables[L"RandomDataSource"])));
            }
            if (ds->Tables[L"ThreadTargets"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::ThreadTargetsDataTable(ds->Tables[L"ThreadTargets"])));
            }
            if (ds->Tables[L"ThreadTarget"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::ThreadTargetDataTable(ds->Tables[L"ThreadTarget"])));
            }
            if (ds->Tables[L"Affinity"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::AffinityDataTable(ds->Tables[L"Affinity"])));
            }
            if (ds->Tables[L"AffinityAssignment"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::AffinityAssignmentDataTable(ds->Tables[L"AffinityAssignment"])));
            }
            if (ds->Tables[L"AffinityGroupAssignment"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::AffinityGroupAssignmentDataTable(ds->Tables[L"AffinityGroupAssignment"])));
            }
            if (ds->Tables[L"ETW"] != nullptr) {
                __super::Tables->Add((gcnew XmlProfileParser::NewDataSet::ETWDataTable(ds->Tables[L"ETW"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void NewDataSet::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
        this->tableProfile = (cli::safe_cast<XmlProfileParser::NewDataSet::ProfileDataTable^  >(__super::Tables[L"Profile"]));
        if (initTable == true) {
            if (this->tableProfile != nullptr) {
                this->tableProfile->InitVars();
            }
        }
        this->tableTimeSpans = (cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpansDataTable^  >(__super::Tables[L"TimeSpans"]));
        if (initTable == true) {
            if (this->tableTimeSpans != nullptr) {
                this->tableTimeSpans->InitVars();
            }
        }
        this->tableTimeSpan = (cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpanDataTable^  >(__super::Tables[L"TimeSpan"]));
        if (initTable == true) {
            if (this->tableTimeSpan != nullptr) {
                this->tableTimeSpan->InitVars();
            }
        }
        this->tableTargets = (cli::safe_cast<XmlProfileParser::NewDataSet::TargetsDataTable^  >(__super::Tables[L"Targets"]));
        if (initTable == true) {
            if (this->tableTargets != nullptr) {
                this->tableTargets->InitVars();
            }
        }
        this->tableTarget = (cli::safe_cast<XmlProfileParser::NewDataSet::TargetDataTable^  >(__super::Tables[L"Target"]));
        if (initTable == true) {
            if (this->tableTarget != nullptr) {
                this->tableTarget->InitVars();
            }
        }
        this->tableWriteBufferContent = (cli::safe_cast<XmlProfileParser::NewDataSet::WriteBufferContentDataTable^  >(__super::Tables[L"WriteBufferContent"]));
        if (initTable == true) {
            if (this->tableWriteBufferContent != nullptr) {
                this->tableWriteBufferContent->InitVars();
            }
        }
        this->tableRandomDataSource = (cli::safe_cast<XmlProfileParser::NewDataSet::RandomDataSourceDataTable^  >(__super::Tables[L"RandomDataSource"]));
        if (initTable == true) {
            if (this->tableRandomDataSource != nullptr) {
                this->tableRandomDataSource->InitVars();
            }
        }
        this->tableThreadTargets = (cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetsDataTable^  >(__super::Tables[L"ThreadTargets"]));
        if (initTable == true) {
            if (this->tableThreadTargets != nullptr) {
                this->tableThreadTargets->InitVars();
            }
        }
        this->tableThreadTarget = (cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetDataTable^  >(__super::Tables[L"ThreadTarget"]));
        if (initTable == true) {
            if (this->tableThreadTarget != nullptr) {
                this->tableThreadTarget->InitVars();
            }
        }
        this->tableAffinity = (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityDataTable^  >(__super::Tables[L"Affinity"]));
        if (initTable == true) {
            if (this->tableAffinity != nullptr) {
                this->tableAffinity->InitVars();
            }
        }
        this->tableAffinityAssignment = (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityAssignmentDataTable^  >(__super::Tables[L"AffinityAssignment"]));
        if (initTable == true) {
            if (this->tableAffinityAssignment != nullptr) {
                this->tableAffinityAssignment->InitVars();
            }
        }
        this->tableAffinityGroupAssignment = (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityGroupAssignmentDataTable^  >(__super::Tables[L"AffinityGroupAssignment"]));
        if (initTable == true) {
            if (this->tableAffinityGroupAssignment != nullptr) {
                this->tableAffinityGroupAssignment->InitVars();
            }
        }
        this->tableETW = (cli::safe_cast<XmlProfileParser::NewDataSet::ETWDataTable^  >(__super::Tables[L"ETW"]));
        if (initTable == true) {
            if (this->tableETW != nullptr) {
                this->tableETW->InitVars();
            }
        }
        this->relationProfile_TimeSpans = this->Relations[L"Profile_TimeSpans"];
        this->relationTimeSpans_TimeSpan = this->Relations[L"TimeSpans_TimeSpan"];
        this->relationTimeSpan_Targets = this->Relations[L"TimeSpan_Targets"];
        this->relationTargets_Target = this->Relations[L"Targets_Target"];
        this->relationTarget_WriteBufferContent = this->Relations[L"Target_WriteBufferContent"];
        this->relationWriteBufferContent_RandomDataSource = this->Relations[L"WriteBufferContent_RandomDataSource"];
        this->relationTarget_ThreadTargets = this->Relations[L"Target_ThreadTargets"];
        this->relationThreadTargets_ThreadTarget = this->Relations[L"ThreadTargets_ThreadTarget"];
        this->relationTimeSpan_Affinity = this->Relations[L"TimeSpan_Affinity"];
        this->relationAffinity_AffinityAssignment = this->Relations[L"Affinity_AffinityAssignment"];
        this->relationAffinity_AffinityGroupAssignment = this->Relations[L"Affinity_AffinityGroupAssignment"];
        this->relationProfile_ETW = this->Relations[L"Profile_ETW"];
    }
    
    inline ::System::Void NewDataSet::InitClass() {
        this->DataSetName = L"NewDataSet";
        this->Prefix = L"";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableProfile = (gcnew XmlProfileParser::NewDataSet::ProfileDataTable());
        __super::Tables->Add(this->tableProfile);
        this->tableTimeSpans = (gcnew XmlProfileParser::NewDataSet::TimeSpansDataTable());
        __super::Tables->Add(this->tableTimeSpans);
        this->tableTimeSpan = (gcnew XmlProfileParser::NewDataSet::TimeSpanDataTable());
        __super::Tables->Add(this->tableTimeSpan);
        this->tableTargets = (gcnew XmlProfileParser::NewDataSet::TargetsDataTable());
        __super::Tables->Add(this->tableTargets);
        this->tableTarget = (gcnew XmlProfileParser::NewDataSet::TargetDataTable());
        __super::Tables->Add(this->tableTarget);
        this->tableWriteBufferContent = (gcnew XmlProfileParser::NewDataSet::WriteBufferContentDataTable());
        __super::Tables->Add(this->tableWriteBufferContent);
        this->tableRandomDataSource = (gcnew XmlProfileParser::NewDataSet::RandomDataSourceDataTable());
        __super::Tables->Add(this->tableRandomDataSource);
        this->tableThreadTargets = (gcnew XmlProfileParser::NewDataSet::ThreadTargetsDataTable());
        __super::Tables->Add(this->tableThreadTargets);
        this->tableThreadTarget = (gcnew XmlProfileParser::NewDataSet::ThreadTargetDataTable());
        __super::Tables->Add(this->tableThreadTarget);
        this->tableAffinity = (gcnew XmlProfileParser::NewDataSet::AffinityDataTable());
        __super::Tables->Add(this->tableAffinity);
        this->tableAffinityAssignment = (gcnew XmlProfileParser::NewDataSet::AffinityAssignmentDataTable());
        __super::Tables->Add(this->tableAffinityAssignment);
        this->tableAffinityGroupAssignment = (gcnew XmlProfileParser::NewDataSet::AffinityGroupAssignmentDataTable());
        __super::Tables->Add(this->tableAffinityGroupAssignment);
        this->tableETW = (gcnew XmlProfileParser::NewDataSet::ETWDataTable());
        __super::Tables->Add(this->tableETW);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Profile_TimeSpans", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableProfile->Profile_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTimeSpans->Profile_IdColumn}));
        this->tableTimeSpans->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TimeSpans_TimeSpan", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTimeSpans->TimeSpans_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTimeSpan->TimeSpans_IdColumn}));
        this->tableTimeSpan->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TimeSpan_Targets", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTimeSpan->TimeSpan_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTargets->TimeSpan_IdColumn}));
        this->tableTargets->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Targets_Target", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTargets->Targets_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTarget->Targets_IdColumn}));
        this->tableTarget->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Target_WriteBufferContent", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTarget->Target_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWriteBufferContent->Target_IdColumn}));
        this->tableWriteBufferContent->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"WriteBufferContent_RandomDataSource", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWriteBufferContent->WriteBufferContent_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRandomDataSource->WriteBufferContent_IdColumn}));
        this->tableRandomDataSource->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Target_ThreadTargets", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTarget->Target_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableThreadTargets->Target_IdColumn}));
        this->tableThreadTargets->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"ThreadTargets_ThreadTarget", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableThreadTargets->ThreadTargets_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableThreadTarget->ThreadTargets_IdColumn}));
        this->tableThreadTarget->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TimeSpan_Affinity", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTimeSpan->TimeSpan_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAffinity->TimeSpan_IdColumn}));
        this->tableAffinity->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Affinity_AffinityAssignment", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAffinity->Affinity_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAffinityAssignment->Affinity_IdColumn}));
        this->tableAffinityAssignment->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Affinity_AffinityGroupAssignment", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAffinity->Affinity_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAffinityGroupAssignment->Affinity_IdColumn}));
        this->tableAffinityGroupAssignment->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Profile_ETW", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableProfile->Profile_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETW->Profile_IdColumn}));
        this->tableETW->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationProfile_TimeSpans = (gcnew ::System::Data::DataRelation(L"Profile_TimeSpans", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableProfile->Profile_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTimeSpans->Profile_IdColumn}, false));
        this->relationProfile_TimeSpans->Nested = true;
        this->Relations->Add(this->relationProfile_TimeSpans);
        this->relationTimeSpans_TimeSpan = (gcnew ::System::Data::DataRelation(L"TimeSpans_TimeSpan", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTimeSpans->TimeSpans_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTimeSpan->TimeSpans_IdColumn}, false));
        this->relationTimeSpans_TimeSpan->Nested = true;
        this->Relations->Add(this->relationTimeSpans_TimeSpan);
        this->relationTimeSpan_Targets = (gcnew ::System::Data::DataRelation(L"TimeSpan_Targets", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTimeSpan->TimeSpan_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTargets->TimeSpan_IdColumn}, false));
        this->relationTimeSpan_Targets->Nested = true;
        this->Relations->Add(this->relationTimeSpan_Targets);
        this->relationTargets_Target = (gcnew ::System::Data::DataRelation(L"Targets_Target", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTargets->Targets_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTarget->Targets_IdColumn}, false));
        this->relationTargets_Target->Nested = true;
        this->Relations->Add(this->relationTargets_Target);
        this->relationTarget_WriteBufferContent = (gcnew ::System::Data::DataRelation(L"Target_WriteBufferContent", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTarget->Target_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWriteBufferContent->Target_IdColumn}, false));
        this->relationTarget_WriteBufferContent->Nested = true;
        this->Relations->Add(this->relationTarget_WriteBufferContent);
        this->relationWriteBufferContent_RandomDataSource = (gcnew ::System::Data::DataRelation(L"WriteBufferContent_RandomDataSource", 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWriteBufferContent->WriteBufferContent_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRandomDataSource->WriteBufferContent_IdColumn}, 
            false));
        this->relationWriteBufferContent_RandomDataSource->Nested = true;
        this->Relations->Add(this->relationWriteBufferContent_RandomDataSource);
        this->relationTarget_ThreadTargets = (gcnew ::System::Data::DataRelation(L"Target_ThreadTargets", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTarget->Target_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableThreadTargets->Target_IdColumn}, false));
        this->relationTarget_ThreadTargets->Nested = true;
        this->Relations->Add(this->relationTarget_ThreadTargets);
        this->relationThreadTargets_ThreadTarget = (gcnew ::System::Data::DataRelation(L"ThreadTargets_ThreadTarget", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableThreadTargets->ThreadTargets_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableThreadTarget->ThreadTargets_IdColumn}, false));
        this->relationThreadTargets_ThreadTarget->Nested = true;
        this->Relations->Add(this->relationThreadTargets_ThreadTarget);
        this->relationTimeSpan_Affinity = (gcnew ::System::Data::DataRelation(L"TimeSpan_Affinity", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTimeSpan->TimeSpan_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAffinity->TimeSpan_IdColumn}, false));
        this->relationTimeSpan_Affinity->Nested = true;
        this->Relations->Add(this->relationTimeSpan_Affinity);
        this->relationAffinity_AffinityAssignment = (gcnew ::System::Data::DataRelation(L"Affinity_AffinityAssignment", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAffinity->Affinity_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAffinityAssignment->Affinity_IdColumn}, false));
        this->relationAffinity_AffinityAssignment->Nested = true;
        this->Relations->Add(this->relationAffinity_AffinityAssignment);
        this->relationAffinity_AffinityGroupAssignment = (gcnew ::System::Data::DataRelation(L"Affinity_AffinityGroupAssignment", 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAffinity->Affinity_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAffinityGroupAssignment->Affinity_IdColumn}, 
            false));
        this->relationAffinity_AffinityGroupAssignment->Nested = true;
        this->Relations->Add(this->relationAffinity_AffinityGroupAssignment);
        this->relationProfile_ETW = (gcnew ::System::Data::DataRelation(L"Profile_ETW", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableProfile->Profile_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETW->Profile_IdColumn}, false));
        this->relationProfile_ETW->Nested = true;
        this->Relations->Add(this->relationProfile_ETW);
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeProfile() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTimeSpans() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTimeSpan() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTargets() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTarget() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeWriteBufferContent() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRandomDataSource() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeThreadTargets() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeThreadTarget() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeAffinity() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeAffinityAssignment() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeAffinityGroupAssignment() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeETW() {
        return false;
    }
    
    inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        XmlProfileParser::NewDataSet^  ds = (gcnew XmlProfileParser::NewDataSet());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ProfileDataTable::ProfileDataTable() {
        this->TableName = L"Profile";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ProfileDataTable::ProfileDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ProfileDataTable::ProfileDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ProfileDataTable::VerboseColumn::get() {
        return this->columnVerbose;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ProfileDataTable::ProgressColumn::get() {
        return this->columnProgress;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ProfileDataTable::ResultFormatColumn::get() {
        return this->columnResultFormat;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ProfileDataTable::PrecreateFilesColumn::get() {
        return this->columnPrecreateFiles;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ProfileDataTable::Profile_IdColumn::get() {
        return this->columnProfile_Id;
    }
    
    inline ::System::Int32 NewDataSet::ProfileDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XmlProfileParser::NewDataSet::ProfileRow^  NewDataSet::ProfileDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::ProfileRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ProfileDataTable::AddProfileRow(XmlProfileParser::NewDataSet::ProfileRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XmlProfileParser::NewDataSet::ProfileRow^  NewDataSet::ProfileDataTable::AddProfileRow(System::Boolean Verbose, 
                System::UInt32 Progress, System::String^  ResultFormat, System::String^  PrecreateFiles) {
        XmlProfileParser::NewDataSet::ProfileRow^  rowProfileRow = (cli::safe_cast<XmlProfileParser::NewDataSet::ProfileRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {Verbose, Progress, 
            ResultFormat, PrecreateFiles, nullptr};
        rowProfileRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowProfileRow);
        return rowProfileRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ProfileDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ProfileDataTable::Clone() {
        XmlProfileParser::NewDataSet::ProfileDataTable^  cln = (cli::safe_cast<XmlProfileParser::NewDataSet::ProfileDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ProfileDataTable::CreateInstance() {
        return (gcnew XmlProfileParser::NewDataSet::ProfileDataTable());
    }
    
    inline ::System::Void NewDataSet::ProfileDataTable::InitVars() {
        this->columnVerbose = __super::Columns[L"Verbose"];
        this->columnProgress = __super::Columns[L"Progress"];
        this->columnResultFormat = __super::Columns[L"ResultFormat"];
        this->columnPrecreateFiles = __super::Columns[L"PrecreateFiles"];
        this->columnProfile_Id = __super::Columns[L"Profile_Id"];
    }
    
    inline ::System::Void NewDataSet::ProfileDataTable::InitClass() {
        this->columnVerbose = (gcnew ::System::Data::DataColumn(L"Verbose", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnVerbose);
        this->columnProgress = (gcnew ::System::Data::DataColumn(L"Progress", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnProgress);
        this->columnResultFormat = (gcnew ::System::Data::DataColumn(L"ResultFormat", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnResultFormat);
        this->columnPrecreateFiles = (gcnew ::System::Data::DataColumn(L"PrecreateFiles", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnPrecreateFiles);
        this->columnProfile_Id = (gcnew ::System::Data::DataColumn(L"Profile_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnProfile_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnProfile_Id}, 
                true)));
        this->columnProfile_Id->AutoIncrement = true;
        this->columnProfile_Id->AllowDBNull = false;
        this->columnProfile_Id->Unique = true;
    }
    
    inline XmlProfileParser::NewDataSet::ProfileRow^  NewDataSet::ProfileDataTable::NewProfileRow() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::ProfileRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ProfileDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XmlProfileParser::NewDataSet::ProfileRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ProfileDataTable::GetRowType() {
        return XmlProfileParser::NewDataSet::ProfileRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ProfileDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ProfileRowChanged(this, (gcnew XmlProfileParser::NewDataSet::ProfileRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ProfileRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProfileDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ProfileRowChanging(this, (gcnew XmlProfileParser::NewDataSet::ProfileRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ProfileRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProfileDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ProfileRowDeleted(this, (gcnew XmlProfileParser::NewDataSet::ProfileRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ProfileRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProfileDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ProfileRowDeleting(this, (gcnew XmlProfileParser::NewDataSet::ProfileRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ProfileRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProfileDataTable::RemoveProfileRow(XmlProfileParser::NewDataSet::ProfileRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ProfileDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XmlProfileParser::NewDataSet^  ds = (gcnew XmlProfileParser::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ProfileDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::TimeSpansDataTable::TimeSpansDataTable() {
        this->TableName = L"TimeSpans";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::TimeSpansDataTable::TimeSpansDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::TimeSpansDataTable::TimeSpansDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpansDataTable::TimeSpans_IdColumn::get() {
        return this->columnTimeSpans_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpansDataTable::Profile_IdColumn::get() {
        return this->columnProfile_Id;
    }
    
    inline ::System::Int32 NewDataSet::TimeSpansDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XmlProfileParser::NewDataSet::TimeSpansRow^  NewDataSet::TimeSpansDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpansRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::TimeSpansDataTable::AddTimeSpansRow(XmlProfileParser::NewDataSet::TimeSpansRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XmlProfileParser::NewDataSet::TimeSpansRow^  NewDataSet::TimeSpansDataTable::AddTimeSpansRow(XmlProfileParser::NewDataSet::ProfileRow^  parentProfileRowByProfile_TimeSpans) {
        XmlProfileParser::NewDataSet::TimeSpansRow^  rowTimeSpansRow = (cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpansRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentProfileRowByProfile_TimeSpans != nullptr) {
            columnValuesArray[1] = parentProfileRowByProfile_TimeSpans[4];
        }
        rowTimeSpansRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowTimeSpansRow);
        return rowTimeSpansRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::TimeSpansDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::TimeSpansDataTable::Clone() {
        XmlProfileParser::NewDataSet::TimeSpansDataTable^  cln = (cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpansDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::TimeSpansDataTable::CreateInstance() {
        return (gcnew XmlProfileParser::NewDataSet::TimeSpansDataTable());
    }
    
    inline ::System::Void NewDataSet::TimeSpansDataTable::InitVars() {
        this->columnTimeSpans_Id = __super::Columns[L"TimeSpans_Id"];
        this->columnProfile_Id = __super::Columns[L"Profile_Id"];
    }
    
    inline ::System::Void NewDataSet::TimeSpansDataTable::InitClass() {
        this->columnTimeSpans_Id = (gcnew ::System::Data::DataColumn(L"TimeSpans_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTimeSpans_Id);
        this->columnProfile_Id = (gcnew ::System::Data::DataColumn(L"Profile_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnProfile_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnTimeSpans_Id}, 
                true)));
        this->columnTimeSpans_Id->AutoIncrement = true;
        this->columnTimeSpans_Id->AllowDBNull = false;
        this->columnTimeSpans_Id->Unique = true;
    }
    
    inline XmlProfileParser::NewDataSet::TimeSpansRow^  NewDataSet::TimeSpansDataTable::NewTimeSpansRow() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpansRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::TimeSpansDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XmlProfileParser::NewDataSet::TimeSpansRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::TimeSpansDataTable::GetRowType() {
        return XmlProfileParser::NewDataSet::TimeSpansRow::typeid;
    }
    
    inline ::System::Void NewDataSet::TimeSpansDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->TimeSpansRowChanged(this, (gcnew XmlProfileParser::NewDataSet::TimeSpansRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpansRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TimeSpansDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->TimeSpansRowChanging(this, (gcnew XmlProfileParser::NewDataSet::TimeSpansRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpansRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TimeSpansDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->TimeSpansRowDeleted(this, (gcnew XmlProfileParser::NewDataSet::TimeSpansRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpansRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TimeSpansDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->TimeSpansRowDeleting(this, (gcnew XmlProfileParser::NewDataSet::TimeSpansRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpansRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TimeSpansDataTable::RemoveTimeSpansRow(XmlProfileParser::NewDataSet::TimeSpansRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::TimeSpansDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XmlProfileParser::NewDataSet^  ds = (gcnew XmlProfileParser::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"TimeSpansDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::TimeSpanDataTable::TimeSpanDataTable() {
        this->TableName = L"TimeSpan";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::TimeSpanDataTable::TimeSpanDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::TimeSpanDataTable::TimeSpanDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpanDataTable::DurationColumn::get() {
        return this->columnDuration;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpanDataTable::WarmupColumn::get() {
        return this->columnWarmup;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpanDataTable::CooldownColumn::get() {
        return this->columnCooldown;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpanDataTable::RandSeedColumn::get() {
        return this->columnRandSeed;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpanDataTable::RandomWriteDataColumn::get() {
        return this->columnRandomWriteData;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpanDataTable::ThreadCountColumn::get() {
        return this->columnThreadCount;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpanDataTable::RequestCountColumn::get() {
        return this->columnRequestCount;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpanDataTable::GroupAffinityColumn::get() {
        return this->columnGroupAffinity;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpanDataTable::DisableAffinityColumn::get() {
        return this->columnDisableAffinity;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpanDataTable::CompletionRoutinesColumn::get() {
        return this->columnCompletionRoutines;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpanDataTable::MeasureLatencyColumn::get() {
        return this->columnMeasureLatency;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpanDataTable::CalculateIopsStdDevColumn::get() {
        return this->columnCalculateIopsStdDev;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpanDataTable::IoBucketDurationColumn::get() {
        return this->columnIoBucketDuration;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpanDataTable::TimeSpan_IdColumn::get() {
        return this->columnTimeSpan_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TimeSpanDataTable::TimeSpans_IdColumn::get() {
        return this->columnTimeSpans_Id;
    }
    
    inline ::System::Int32 NewDataSet::TimeSpanDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XmlProfileParser::NewDataSet::TimeSpanRow^  NewDataSet::TimeSpanDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpanRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::TimeSpanDataTable::AddTimeSpanRow(XmlProfileParser::NewDataSet::TimeSpanRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XmlProfileParser::NewDataSet::TimeSpanRow^  NewDataSet::TimeSpanDataTable::AddTimeSpanRow(
                System::UInt32 Duration, 
                System::UInt32 Warmup, 
                System::UInt32 Cooldown, 
                System::UInt32 RandSeed, 
                System::Boolean RandomWriteData, 
                System::UInt32 ThreadCount, 
                System::UInt32 RequestCount, 
                System::Boolean GroupAffinity, 
                System::Boolean DisableAffinity, 
                System::Boolean CompletionRoutines, 
                System::Boolean MeasureLatency, 
                System::Boolean CalculateIopsStdDev, 
                System::UInt32 IoBucketDuration, 
                XmlProfileParser::NewDataSet::TimeSpansRow^  parentTimeSpansRowByTimeSpans_TimeSpan) {
        XmlProfileParser::NewDataSet::TimeSpanRow^  rowTimeSpanRow = (cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpanRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(15) {Duration, Warmup, Cooldown, 
            RandSeed, RandomWriteData, ThreadCount, RequestCount, GroupAffinity, DisableAffinity, CompletionRoutines, MeasureLatency, 
            CalculateIopsStdDev, IoBucketDuration, nullptr, nullptr};
        if (parentTimeSpansRowByTimeSpans_TimeSpan != nullptr) {
            columnValuesArray[14] = parentTimeSpansRowByTimeSpans_TimeSpan[0];
        }
        rowTimeSpanRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowTimeSpanRow);
        return rowTimeSpanRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::TimeSpanDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::TimeSpanDataTable::Clone() {
        XmlProfileParser::NewDataSet::TimeSpanDataTable^  cln = (cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpanDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::TimeSpanDataTable::CreateInstance() {
        return (gcnew XmlProfileParser::NewDataSet::TimeSpanDataTable());
    }
    
    inline ::System::Void NewDataSet::TimeSpanDataTable::InitVars() {
        this->columnDuration = __super::Columns[L"Duration"];
        this->columnWarmup = __super::Columns[L"Warmup"];
        this->columnCooldown = __super::Columns[L"Cooldown"];
        this->columnRandSeed = __super::Columns[L"RandSeed"];
        this->columnRandomWriteData = __super::Columns[L"RandomWriteData"];
        this->columnThreadCount = __super::Columns[L"ThreadCount"];
        this->columnRequestCount = __super::Columns[L"RequestCount"];
        this->columnGroupAffinity = __super::Columns[L"GroupAffinity"];
        this->columnDisableAffinity = __super::Columns[L"DisableAffinity"];
        this->columnCompletionRoutines = __super::Columns[L"CompletionRoutines"];
        this->columnMeasureLatency = __super::Columns[L"MeasureLatency"];
        this->columnCalculateIopsStdDev = __super::Columns[L"CalculateIopsStdDev"];
        this->columnIoBucketDuration = __super::Columns[L"IoBucketDuration"];
        this->columnTimeSpan_Id = __super::Columns[L"TimeSpan_Id"];
        this->columnTimeSpans_Id = __super::Columns[L"TimeSpans_Id"];
    }
    
    inline ::System::Void NewDataSet::TimeSpanDataTable::InitClass() {
        this->columnDuration = (gcnew ::System::Data::DataColumn(L"Duration", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDuration);
        this->columnWarmup = (gcnew ::System::Data::DataColumn(L"Warmup", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnWarmup);
        this->columnCooldown = (gcnew ::System::Data::DataColumn(L"Cooldown", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnCooldown);
        this->columnRandSeed = (gcnew ::System::Data::DataColumn(L"RandSeed", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnRandSeed);
        this->columnRandomWriteData = (gcnew ::System::Data::DataColumn(L"RandomWriteData", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnRandomWriteData);
        this->columnThreadCount = (gcnew ::System::Data::DataColumn(L"ThreadCount", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnThreadCount);
        this->columnRequestCount = (gcnew ::System::Data::DataColumn(L"RequestCount", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnRequestCount);
        this->columnGroupAffinity = (gcnew ::System::Data::DataColumn(L"GroupAffinity", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnGroupAffinity);
        this->columnDisableAffinity = (gcnew ::System::Data::DataColumn(L"DisableAffinity", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDisableAffinity);
        this->columnCompletionRoutines = (gcnew ::System::Data::DataColumn(L"CompletionRoutines", ::System::Boolean::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnCompletionRoutines);
        this->columnMeasureLatency = (gcnew ::System::Data::DataColumn(L"MeasureLatency", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnMeasureLatency);
        this->columnCalculateIopsStdDev = (gcnew ::System::Data::DataColumn(L"CalculateIopsStdDev", ::System::Boolean::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnCalculateIopsStdDev);
        this->columnIoBucketDuration = (gcnew ::System::Data::DataColumn(L"IoBucketDuration", ::System::UInt32::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnIoBucketDuration);
        this->columnTimeSpan_Id = (gcnew ::System::Data::DataColumn(L"TimeSpan_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTimeSpan_Id);
        this->columnTimeSpans_Id = (gcnew ::System::Data::DataColumn(L"TimeSpans_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTimeSpans_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnTimeSpan_Id}, 
                true)));
        this->columnTimeSpan_Id->AutoIncrement = true;
        this->columnTimeSpan_Id->AllowDBNull = false;
        this->columnTimeSpan_Id->Unique = true;
    }
    
    inline XmlProfileParser::NewDataSet::TimeSpanRow^  NewDataSet::TimeSpanDataTable::NewTimeSpanRow() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpanRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::TimeSpanDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XmlProfileParser::NewDataSet::TimeSpanRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::TimeSpanDataTable::GetRowType() {
        return XmlProfileParser::NewDataSet::TimeSpanRow::typeid;
    }
    
    inline ::System::Void NewDataSet::TimeSpanDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->TimeSpanRowChanged(this, (gcnew XmlProfileParser::NewDataSet::TimeSpanRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpanRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TimeSpanDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->TimeSpanRowChanging(this, (gcnew XmlProfileParser::NewDataSet::TimeSpanRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpanRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TimeSpanDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->TimeSpanRowDeleted(this, (gcnew XmlProfileParser::NewDataSet::TimeSpanRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpanRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TimeSpanDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->TimeSpanRowDeleting(this, (gcnew XmlProfileParser::NewDataSet::TimeSpanRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpanRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TimeSpanDataTable::RemoveTimeSpanRow(XmlProfileParser::NewDataSet::TimeSpanRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::TimeSpanDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XmlProfileParser::NewDataSet^  ds = (gcnew XmlProfileParser::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"TimeSpanDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::TargetsDataTable::TargetsDataTable() {
        this->TableName = L"Targets";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::TargetsDataTable::TargetsDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::TargetsDataTable::TargetsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetsDataTable::Targets_IdColumn::get() {
        return this->columnTargets_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetsDataTable::TimeSpan_IdColumn::get() {
        return this->columnTimeSpan_Id;
    }
    
    inline ::System::Int32 NewDataSet::TargetsDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XmlProfileParser::NewDataSet::TargetsRow^  NewDataSet::TargetsDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::TargetsRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::TargetsDataTable::AddTargetsRow(XmlProfileParser::NewDataSet::TargetsRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XmlProfileParser::NewDataSet::TargetsRow^  NewDataSet::TargetsDataTable::AddTargetsRow(XmlProfileParser::NewDataSet::TimeSpanRow^  parentTimeSpanRowByTimeSpan_Targets) {
        XmlProfileParser::NewDataSet::TargetsRow^  rowTargetsRow = (cli::safe_cast<XmlProfileParser::NewDataSet::TargetsRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentTimeSpanRowByTimeSpan_Targets != nullptr) {
            columnValuesArray[1] = parentTimeSpanRowByTimeSpan_Targets[13];
        }
        rowTargetsRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowTargetsRow);
        return rowTargetsRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::TargetsDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::TargetsDataTable::Clone() {
        XmlProfileParser::NewDataSet::TargetsDataTable^  cln = (cli::safe_cast<XmlProfileParser::NewDataSet::TargetsDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::TargetsDataTable::CreateInstance() {
        return (gcnew XmlProfileParser::NewDataSet::TargetsDataTable());
    }
    
    inline ::System::Void NewDataSet::TargetsDataTable::InitVars() {
        this->columnTargets_Id = __super::Columns[L"Targets_Id"];
        this->columnTimeSpan_Id = __super::Columns[L"TimeSpan_Id"];
    }
    
    inline ::System::Void NewDataSet::TargetsDataTable::InitClass() {
        this->columnTargets_Id = (gcnew ::System::Data::DataColumn(L"Targets_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTargets_Id);
        this->columnTimeSpan_Id = (gcnew ::System::Data::DataColumn(L"TimeSpan_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTimeSpan_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnTargets_Id}, 
                true)));
        this->columnTargets_Id->AutoIncrement = true;
        this->columnTargets_Id->AllowDBNull = false;
        this->columnTargets_Id->Unique = true;
    }
    
    inline XmlProfileParser::NewDataSet::TargetsRow^  NewDataSet::TargetsDataTable::NewTargetsRow() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::TargetsRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::TargetsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XmlProfileParser::NewDataSet::TargetsRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::TargetsDataTable::GetRowType() {
        return XmlProfileParser::NewDataSet::TargetsRow::typeid;
    }
    
    inline ::System::Void NewDataSet::TargetsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->TargetsRowChanged(this, (gcnew XmlProfileParser::NewDataSet::TargetsRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TargetsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TargetsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->TargetsRowChanging(this, (gcnew XmlProfileParser::NewDataSet::TargetsRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TargetsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TargetsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->TargetsRowDeleted(this, (gcnew XmlProfileParser::NewDataSet::TargetsRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TargetsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TargetsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->TargetsRowDeleting(this, (gcnew XmlProfileParser::NewDataSet::TargetsRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TargetsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TargetsDataTable::RemoveTargetsRow(XmlProfileParser::NewDataSet::TargetsRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::TargetsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XmlProfileParser::NewDataSet^  ds = (gcnew XmlProfileParser::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"TargetsDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::TargetDataTable::TargetDataTable() {
        this->TableName = L"Target";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::TargetDataTable::TargetDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::TargetDataTable::TargetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::PathColumn::get() {
        return this->columnPath;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::BlockSizeColumn::get() {
        return this->columnBlockSize;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::StrideSizeColumn::get() {
        return this->columnStrideSize;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::InterlockedSequentialColumn::get() {
        return this->columnInterlockedSequential;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::BaseFileOffsetColumn::get() {
        return this->columnBaseFileOffset;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::SequentialScanColumn::get() {
        return this->columnSequentialScan;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::RandomAccessColumn::get() {
        return this->columnRandomAccess;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::TemporaryFileColumn::get() {
        return this->columnTemporaryFile;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::UseLargePagesColumn::get() {
        return this->columnUseLargePages;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::RequestCountColumn::get() {
        return this->columnRequestCount;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::RandomColumn::get() {
        return this->columnRandom;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::DisableAllCacheColumn::get() {
        return this->columnDisableAllCache;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::DisableLocalCacheColumn::get() {
        return this->columnDisableLocalCache;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::DisableOSCacheColumn::get() {
        return this->columnDisableOSCache;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::WriteThroughColumn::get() {
        return this->columnWriteThrough;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::MemoryMappedIoColumn::get() {
        return this->columnMemoryMappedIo;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::FlushTypeColumn::get() {
        return this->columnFlushType;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::BurstSizeColumn::get() {
        return this->columnBurstSize;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::ThinkTimeColumn::get() {
        return this->columnThinkTime;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::ThroughputColumn::get() {
        return this->columnThroughput;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::ThreadsPerFileColumn::get() {
        return this->columnThreadsPerFile;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::FileSizeColumn::get() {
        return this->columnFileSize;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::MaxFileSizeColumn::get() {
        return this->columnMaxFileSize;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::WriteRatioColumn::get() {
        return this->columnWriteRatio;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::ParallelAsyncIOColumn::get() {
        return this->columnParallelAsyncIO;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::ThreadStrideColumn::get() {
        return this->columnThreadStride;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::IOPriorityColumn::get() {
        return this->columnIOPriority;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::WeightColumn::get() {
        return this->columnWeight;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::Target_IdColumn::get() {
        return this->columnTarget_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TargetDataTable::Targets_IdColumn::get() {
        return this->columnTargets_Id;
    }
    
    inline ::System::Int32 NewDataSet::TargetDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XmlProfileParser::NewDataSet::TargetRow^  NewDataSet::TargetDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::TargetRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::TargetDataTable::AddTargetRow(XmlProfileParser::NewDataSet::TargetRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XmlProfileParser::NewDataSet::TargetRow^  NewDataSet::TargetDataTable::AddTargetRow(
                System::String^  Path, 
                System::UInt32 BlockSize, 
                System::UInt64 StrideSize, 
                System::Boolean InterlockedSequential, 
                System::UInt64 BaseFileOffset, 
                System::Boolean SequentialScan, 
                System::Boolean RandomAccess, 
                System::Boolean TemporaryFile, 
                System::Boolean UseLargePages, 
                System::UInt32 RequestCount, 
                System::UInt64 Random, 
                System::Boolean DisableAllCache, 
                System::Boolean DisableLocalCache, 
                System::Boolean DisableOSCache, 
                System::Boolean WriteThrough, 
                System::Boolean MemoryMappedIo, 
                System::String^  FlushType, 
                System::UInt32 BurstSize, 
                System::UInt32 ThinkTime, 
                System::UInt32 Throughput, 
                System::UInt32 ThreadsPerFile, 
                System::UInt64 FileSize, 
                System::UInt64 MaxFileSize, 
                System::UInt32 WriteRatio, 
                System::Boolean ParallelAsyncIO, 
                System::UInt64 ThreadStride, 
                System::UInt32 IOPriority, 
                System::UInt32 Weight, 
                XmlProfileParser::NewDataSet::TargetsRow^  parentTargetsRowByTargets_Target) {
        XmlProfileParser::NewDataSet::TargetRow^  rowTargetRow = (cli::safe_cast<XmlProfileParser::NewDataSet::TargetRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(30) {Path, BlockSize, StrideSize, 
            InterlockedSequential, BaseFileOffset, SequentialScan, RandomAccess, TemporaryFile, UseLargePages, RequestCount, Random, 
            DisableAllCache, DisableLocalCache, DisableOSCache, WriteThrough, MemoryMappedIo, FlushType, BurstSize, ThinkTime, Throughput, 
            ThreadsPerFile, FileSize, MaxFileSize, WriteRatio, ParallelAsyncIO, ThreadStride, IOPriority, Weight, nullptr, nullptr};
        if (parentTargetsRowByTargets_Target != nullptr) {
            columnValuesArray[29] = parentTargetsRowByTargets_Target[0];
        }
        rowTargetRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowTargetRow);
        return rowTargetRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::TargetDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::TargetDataTable::Clone() {
        XmlProfileParser::NewDataSet::TargetDataTable^  cln = (cli::safe_cast<XmlProfileParser::NewDataSet::TargetDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::TargetDataTable::CreateInstance() {
        return (gcnew XmlProfileParser::NewDataSet::TargetDataTable());
    }
    
    inline ::System::Void NewDataSet::TargetDataTable::InitVars() {
        this->columnPath = __super::Columns[L"Path"];
        this->columnBlockSize = __super::Columns[L"BlockSize"];
        this->columnStrideSize = __super::Columns[L"StrideSize"];
        this->columnInterlockedSequential = __super::Columns[L"InterlockedSequential"];
        this->columnBaseFileOffset = __super::Columns[L"BaseFileOffset"];
        this->columnSequentialScan = __super::Columns[L"SequentialScan"];
        this->columnRandomAccess = __super::Columns[L"RandomAccess"];
        this->columnTemporaryFile = __super::Columns[L"TemporaryFile"];
        this->columnUseLargePages = __super::Columns[L"UseLargePages"];
        this->columnRequestCount = __super::Columns[L"RequestCount"];
        this->columnRandom = __super::Columns[L"Random"];
        this->columnDisableAllCache = __super::Columns[L"DisableAllCache"];
        this->columnDisableLocalCache = __super::Columns[L"DisableLocalCache"];
        this->columnDisableOSCache = __super::Columns[L"DisableOSCache"];
        this->columnWriteThrough = __super::Columns[L"WriteThrough"];
        this->columnMemoryMappedIo = __super::Columns[L"MemoryMappedIo"];
        this->columnFlushType = __super::Columns[L"FlushType"];
        this->columnBurstSize = __super::Columns[L"BurstSize"];
        this->columnThinkTime = __super::Columns[L"ThinkTime"];
        this->columnThroughput = __super::Columns[L"Throughput"];
        this->columnThreadsPerFile = __super::Columns[L"ThreadsPerFile"];
        this->columnFileSize = __super::Columns[L"FileSize"];
        this->columnMaxFileSize = __super::Columns[L"MaxFileSize"];
        this->columnWriteRatio = __super::Columns[L"WriteRatio"];
        this->columnParallelAsyncIO = __super::Columns[L"ParallelAsyncIO"];
        this->columnThreadStride = __super::Columns[L"ThreadStride"];
        this->columnIOPriority = __super::Columns[L"IOPriority"];
        this->columnWeight = __super::Columns[L"Weight"];
        this->columnTarget_Id = __super::Columns[L"Target_Id"];
        this->columnTargets_Id = __super::Columns[L"Targets_Id"];
    }
    
    inline ::System::Void NewDataSet::TargetDataTable::InitClass() {
        this->columnPath = (gcnew ::System::Data::DataColumn(L"Path", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnPath);
        this->columnBlockSize = (gcnew ::System::Data::DataColumn(L"BlockSize", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnBlockSize);
        this->columnStrideSize = (gcnew ::System::Data::DataColumn(L"StrideSize", ::System::UInt64::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnStrideSize);
        this->columnInterlockedSequential = (gcnew ::System::Data::DataColumn(L"InterlockedSequential", ::System::Boolean::typeid, 
            nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnInterlockedSequential);
        this->columnBaseFileOffset = (gcnew ::System::Data::DataColumn(L"BaseFileOffset", ::System::UInt64::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnBaseFileOffset);
        this->columnSequentialScan = (gcnew ::System::Data::DataColumn(L"SequentialScan", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnSequentialScan);
        this->columnRandomAccess = (gcnew ::System::Data::DataColumn(L"RandomAccess", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnRandomAccess);
        this->columnTemporaryFile = (gcnew ::System::Data::DataColumn(L"TemporaryFile", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnTemporaryFile);
        this->columnUseLargePages = (gcnew ::System::Data::DataColumn(L"UseLargePages", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnUseLargePages);
        this->columnRequestCount = (gcnew ::System::Data::DataColumn(L"RequestCount", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnRequestCount);
        this->columnRandom = (gcnew ::System::Data::DataColumn(L"Random", ::System::UInt64::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnRandom);
        this->columnDisableAllCache = (gcnew ::System::Data::DataColumn(L"DisableAllCache", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDisableAllCache);
        this->columnDisableLocalCache = (gcnew ::System::Data::DataColumn(L"DisableLocalCache", ::System::Boolean::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDisableLocalCache);
        this->columnDisableOSCache = (gcnew ::System::Data::DataColumn(L"DisableOSCache", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDisableOSCache);
        this->columnWriteThrough = (gcnew ::System::Data::DataColumn(L"WriteThrough", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnWriteThrough);
        this->columnMemoryMappedIo = (gcnew ::System::Data::DataColumn(L"MemoryMappedIo", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnMemoryMappedIo);
        this->columnFlushType = (gcnew ::System::Data::DataColumn(L"FlushType", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFlushType);
        this->columnBurstSize = (gcnew ::System::Data::DataColumn(L"BurstSize", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnBurstSize);
        this->columnThinkTime = (gcnew ::System::Data::DataColumn(L"ThinkTime", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnThinkTime);
        this->columnThroughput = (gcnew ::System::Data::DataColumn(L"Throughput", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnThroughput);
        this->columnThreadsPerFile = (gcnew ::System::Data::DataColumn(L"ThreadsPerFile", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnThreadsPerFile);
        this->columnFileSize = (gcnew ::System::Data::DataColumn(L"FileSize", ::System::UInt64::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFileSize);
        this->columnMaxFileSize = (gcnew ::System::Data::DataColumn(L"MaxFileSize", ::System::UInt64::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnMaxFileSize);
        this->columnWriteRatio = (gcnew ::System::Data::DataColumn(L"WriteRatio", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnWriteRatio);
        this->columnParallelAsyncIO = (gcnew ::System::Data::DataColumn(L"ParallelAsyncIO", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnParallelAsyncIO);
        this->columnThreadStride = (gcnew ::System::Data::DataColumn(L"ThreadStride", ::System::UInt64::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnThreadStride);
        this->columnIOPriority = (gcnew ::System::Data::DataColumn(L"IOPriority", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnIOPriority);
        this->columnWeight = (gcnew ::System::Data::DataColumn(L"Weight", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnWeight);
        this->columnTarget_Id = (gcnew ::System::Data::DataColumn(L"Target_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTarget_Id);
        this->columnTargets_Id = (gcnew ::System::Data::DataColumn(L"Targets_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTargets_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnTarget_Id}, 
                true)));
        this->columnPath->AllowDBNull = false;
        this->columnTarget_Id->AutoIncrement = true;
        this->columnTarget_Id->AllowDBNull = false;
        this->columnTarget_Id->Unique = true;
    }
    
    inline XmlProfileParser::NewDataSet::TargetRow^  NewDataSet::TargetDataTable::NewTargetRow() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::TargetRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::TargetDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XmlProfileParser::NewDataSet::TargetRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::TargetDataTable::GetRowType() {
        return XmlProfileParser::NewDataSet::TargetRow::typeid;
    }
    
    inline ::System::Void NewDataSet::TargetDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->TargetRowChanged(this, (gcnew XmlProfileParser::NewDataSet::TargetRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TargetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TargetDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->TargetRowChanging(this, (gcnew XmlProfileParser::NewDataSet::TargetRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TargetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TargetDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->TargetRowDeleted(this, (gcnew XmlProfileParser::NewDataSet::TargetRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TargetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TargetDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->TargetRowDeleting(this, (gcnew XmlProfileParser::NewDataSet::TargetRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::TargetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TargetDataTable::RemoveTargetRow(XmlProfileParser::NewDataSet::TargetRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::TargetDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XmlProfileParser::NewDataSet^  ds = (gcnew XmlProfileParser::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"TargetDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::WriteBufferContentDataTable::WriteBufferContentDataTable() {
        this->TableName = L"WriteBufferContent";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::WriteBufferContentDataTable::WriteBufferContentDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::WriteBufferContentDataTable::WriteBufferContentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WriteBufferContentDataTable::PatternColumn::get() {
        return this->columnPattern;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WriteBufferContentDataTable::WriteBufferContent_IdColumn::get() {
        return this->columnWriteBufferContent_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::WriteBufferContentDataTable::Target_IdColumn::get() {
        return this->columnTarget_Id;
    }
    
    inline ::System::Int32 NewDataSet::WriteBufferContentDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XmlProfileParser::NewDataSet::WriteBufferContentRow^  NewDataSet::WriteBufferContentDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::WriteBufferContentRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::WriteBufferContentDataTable::AddWriteBufferContentRow(XmlProfileParser::NewDataSet::WriteBufferContentRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XmlProfileParser::NewDataSet::WriteBufferContentRow^  NewDataSet::WriteBufferContentDataTable::AddWriteBufferContentRow(
                System::String^  Pattern, XmlProfileParser::NewDataSet::TargetRow^  parentTargetRowByTarget_WriteBufferContent) {
        XmlProfileParser::NewDataSet::WriteBufferContentRow^  rowWriteBufferContentRow = (cli::safe_cast<XmlProfileParser::NewDataSet::WriteBufferContentRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {Pattern, nullptr, nullptr};
        if (parentTargetRowByTarget_WriteBufferContent != nullptr) {
            columnValuesArray[2] = parentTargetRowByTarget_WriteBufferContent[28];
        }
        rowWriteBufferContentRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowWriteBufferContentRow);
        return rowWriteBufferContentRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::WriteBufferContentDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::WriteBufferContentDataTable::Clone() {
        XmlProfileParser::NewDataSet::WriteBufferContentDataTable^  cln = (cli::safe_cast<XmlProfileParser::NewDataSet::WriteBufferContentDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::WriteBufferContentDataTable::CreateInstance() {
        return (gcnew XmlProfileParser::NewDataSet::WriteBufferContentDataTable());
    }
    
    inline ::System::Void NewDataSet::WriteBufferContentDataTable::InitVars() {
        this->columnPattern = __super::Columns[L"Pattern"];
        this->columnWriteBufferContent_Id = __super::Columns[L"WriteBufferContent_Id"];
        this->columnTarget_Id = __super::Columns[L"Target_Id"];
    }
    
    inline ::System::Void NewDataSet::WriteBufferContentDataTable::InitClass() {
        this->columnPattern = (gcnew ::System::Data::DataColumn(L"Pattern", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnPattern);
        this->columnWriteBufferContent_Id = (gcnew ::System::Data::DataColumn(L"WriteBufferContent_Id", ::System::Int32::typeid, 
            nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnWriteBufferContent_Id);
        this->columnTarget_Id = (gcnew ::System::Data::DataColumn(L"Target_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTarget_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnWriteBufferContent_Id}, 
                true)));
        this->columnPattern->AllowDBNull = false;
        this->columnWriteBufferContent_Id->AutoIncrement = true;
        this->columnWriteBufferContent_Id->AllowDBNull = false;
        this->columnWriteBufferContent_Id->Unique = true;
    }
    
    inline XmlProfileParser::NewDataSet::WriteBufferContentRow^  NewDataSet::WriteBufferContentDataTable::NewWriteBufferContentRow() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::WriteBufferContentRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::WriteBufferContentDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XmlProfileParser::NewDataSet::WriteBufferContentRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::WriteBufferContentDataTable::GetRowType() {
        return XmlProfileParser::NewDataSet::WriteBufferContentRow::typeid;
    }
    
    inline ::System::Void NewDataSet::WriteBufferContentDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->WriteBufferContentRowChanged(this, (gcnew XmlProfileParser::NewDataSet::WriteBufferContentRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::WriteBufferContentRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WriteBufferContentDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->WriteBufferContentRowChanging(this, (gcnew XmlProfileParser::NewDataSet::WriteBufferContentRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::WriteBufferContentRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WriteBufferContentDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->WriteBufferContentRowDeleted(this, (gcnew XmlProfileParser::NewDataSet::WriteBufferContentRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::WriteBufferContentRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WriteBufferContentDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->WriteBufferContentRowDeleting(this, (gcnew XmlProfileParser::NewDataSet::WriteBufferContentRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::WriteBufferContentRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::WriteBufferContentDataTable::RemoveWriteBufferContentRow(XmlProfileParser::NewDataSet::WriteBufferContentRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::WriteBufferContentDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XmlProfileParser::NewDataSet^  ds = (gcnew XmlProfileParser::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"WriteBufferContentDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::RandomDataSourceDataTable::RandomDataSourceDataTable() {
        this->TableName = L"RandomDataSource";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::RandomDataSourceDataTable::RandomDataSourceDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::RandomDataSourceDataTable::RandomDataSourceDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::RandomDataSourceDataTable::SizeInBytesColumn::get() {
        return this->columnSizeInBytes;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::RandomDataSourceDataTable::FilePathColumn::get() {
        return this->columnFilePath;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::RandomDataSourceDataTable::WriteBufferContent_IdColumn::get() {
        return this->columnWriteBufferContent_Id;
    }
    
    inline ::System::Int32 NewDataSet::RandomDataSourceDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XmlProfileParser::NewDataSet::RandomDataSourceRow^  NewDataSet::RandomDataSourceDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::RandomDataSourceRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::RandomDataSourceDataTable::AddRandomDataSourceRow(XmlProfileParser::NewDataSet::RandomDataSourceRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XmlProfileParser::NewDataSet::RandomDataSourceRow^  NewDataSet::RandomDataSourceDataTable::AddRandomDataSourceRow(
                System::UInt64 SizeInBytes, System::String^  FilePath, XmlProfileParser::NewDataSet::WriteBufferContentRow^  parentWriteBufferContentRowByWriteBufferContent_RandomDataSource) {
        XmlProfileParser::NewDataSet::RandomDataSourceRow^  rowRandomDataSourceRow = (cli::safe_cast<XmlProfileParser::NewDataSet::RandomDataSourceRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {SizeInBytes, FilePath, 
            nullptr};
        if (parentWriteBufferContentRowByWriteBufferContent_RandomDataSource != nullptr) {
            columnValuesArray[2] = parentWriteBufferContentRowByWriteBufferContent_RandomDataSource[1];
        }
        rowRandomDataSourceRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowRandomDataSourceRow);
        return rowRandomDataSourceRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::RandomDataSourceDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::RandomDataSourceDataTable::Clone() {
        XmlProfileParser::NewDataSet::RandomDataSourceDataTable^  cln = (cli::safe_cast<XmlProfileParser::NewDataSet::RandomDataSourceDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::RandomDataSourceDataTable::CreateInstance() {
        return (gcnew XmlProfileParser::NewDataSet::RandomDataSourceDataTable());
    }
    
    inline ::System::Void NewDataSet::RandomDataSourceDataTable::InitVars() {
        this->columnSizeInBytes = __super::Columns[L"SizeInBytes"];
        this->columnFilePath = __super::Columns[L"FilePath"];
        this->columnWriteBufferContent_Id = __super::Columns[L"WriteBufferContent_Id"];
    }
    
    inline ::System::Void NewDataSet::RandomDataSourceDataTable::InitClass() {
        this->columnSizeInBytes = (gcnew ::System::Data::DataColumn(L"SizeInBytes", ::System::UInt64::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnSizeInBytes);
        this->columnFilePath = (gcnew ::System::Data::DataColumn(L"FilePath", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFilePath);
        this->columnWriteBufferContent_Id = (gcnew ::System::Data::DataColumn(L"WriteBufferContent_Id", ::System::Int32::typeid, 
            nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnWriteBufferContent_Id);
        this->columnSizeInBytes->AllowDBNull = false;
    }
    
    inline XmlProfileParser::NewDataSet::RandomDataSourceRow^  NewDataSet::RandomDataSourceDataTable::NewRandomDataSourceRow() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::RandomDataSourceRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::RandomDataSourceDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XmlProfileParser::NewDataSet::RandomDataSourceRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::RandomDataSourceDataTable::GetRowType() {
        return XmlProfileParser::NewDataSet::RandomDataSourceRow::typeid;
    }
    
    inline ::System::Void NewDataSet::RandomDataSourceDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->RandomDataSourceRowChanged(this, (gcnew XmlProfileParser::NewDataSet::RandomDataSourceRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::RandomDataSourceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::RandomDataSourceDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->RandomDataSourceRowChanging(this, (gcnew XmlProfileParser::NewDataSet::RandomDataSourceRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::RandomDataSourceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::RandomDataSourceDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->RandomDataSourceRowDeleted(this, (gcnew XmlProfileParser::NewDataSet::RandomDataSourceRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::RandomDataSourceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::RandomDataSourceDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->RandomDataSourceRowDeleting(this, (gcnew XmlProfileParser::NewDataSet::RandomDataSourceRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::RandomDataSourceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::RandomDataSourceDataTable::RemoveRandomDataSourceRow(XmlProfileParser::NewDataSet::RandomDataSourceRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::RandomDataSourceDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XmlProfileParser::NewDataSet^  ds = (gcnew XmlProfileParser::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"RandomDataSourceDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ThreadTargetsDataTable::ThreadTargetsDataTable() {
        this->TableName = L"ThreadTargets";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ThreadTargetsDataTable::ThreadTargetsDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ThreadTargetsDataTable::ThreadTargetsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ThreadTargetsDataTable::ThreadTargets_IdColumn::get() {
        return this->columnThreadTargets_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ThreadTargetsDataTable::Target_IdColumn::get() {
        return this->columnTarget_Id;
    }
    
    inline ::System::Int32 NewDataSet::ThreadTargetsDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XmlProfileParser::NewDataSet::ThreadTargetsRow^  NewDataSet::ThreadTargetsDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetsRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ThreadTargetsDataTable::AddThreadTargetsRow(XmlProfileParser::NewDataSet::ThreadTargetsRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XmlProfileParser::NewDataSet::ThreadTargetsRow^  NewDataSet::ThreadTargetsDataTable::AddThreadTargetsRow(XmlProfileParser::NewDataSet::TargetRow^  parentTargetRowByTarget_ThreadTargets) {
        XmlProfileParser::NewDataSet::ThreadTargetsRow^  rowThreadTargetsRow = (cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetsRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentTargetRowByTarget_ThreadTargets != nullptr) {
            columnValuesArray[1] = parentTargetRowByTarget_ThreadTargets[28];
        }
        rowThreadTargetsRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowThreadTargetsRow);
        return rowThreadTargetsRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ThreadTargetsDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ThreadTargetsDataTable::Clone() {
        XmlProfileParser::NewDataSet::ThreadTargetsDataTable^  cln = (cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetsDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ThreadTargetsDataTable::CreateInstance() {
        return (gcnew XmlProfileParser::NewDataSet::ThreadTargetsDataTable());
    }
    
    inline ::System::Void NewDataSet::ThreadTargetsDataTable::InitVars() {
        this->columnThreadTargets_Id = __super::Columns[L"ThreadTargets_Id"];
        this->columnTarget_Id = __super::Columns[L"Target_Id"];
    }
    
    inline ::System::Void NewDataSet::ThreadTargetsDataTable::InitClass() {
        this->columnThreadTargets_Id = (gcnew ::System::Data::DataColumn(L"ThreadTargets_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnThreadTargets_Id);
        this->columnTarget_Id = (gcnew ::System::Data::DataColumn(L"Target_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTarget_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnThreadTargets_Id}, 
                true)));
        this->columnThreadTargets_Id->AutoIncrement = true;
        this->columnThreadTargets_Id->AllowDBNull = false;
        this->columnThreadTargets_Id->Unique = true;
    }
    
    inline XmlProfileParser::NewDataSet::ThreadTargetsRow^  NewDataSet::ThreadTargetsDataTable::NewThreadTargetsRow() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetsRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ThreadTargetsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XmlProfileParser::NewDataSet::ThreadTargetsRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ThreadTargetsDataTable::GetRowType() {
        return XmlProfileParser::NewDataSet::ThreadTargetsRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ThreadTargetsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ThreadTargetsRowChanged(this, (gcnew XmlProfileParser::NewDataSet::ThreadTargetsRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ThreadTargetsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ThreadTargetsRowChanging(this, (gcnew XmlProfileParser::NewDataSet::ThreadTargetsRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ThreadTargetsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ThreadTargetsRowDeleted(this, (gcnew XmlProfileParser::NewDataSet::ThreadTargetsRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ThreadTargetsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ThreadTargetsRowDeleting(this, (gcnew XmlProfileParser::NewDataSet::ThreadTargetsRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ThreadTargetsDataTable::RemoveThreadTargetsRow(XmlProfileParser::NewDataSet::ThreadTargetsRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ThreadTargetsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XmlProfileParser::NewDataSet^  ds = (gcnew XmlProfileParser::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ThreadTargetsDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ThreadTargetDataTable::ThreadTargetDataTable() {
        this->TableName = L"ThreadTarget";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ThreadTargetDataTable::ThreadTargetDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ThreadTargetDataTable::ThreadTargetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ThreadTargetDataTable::ThreadColumn::get() {
        return this->columnThread;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ThreadTargetDataTable::WeightColumn::get() {
        return this->columnWeight;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ThreadTargetDataTable::ThreadTargets_IdColumn::get() {
        return this->columnThreadTargets_Id;
    }
    
    inline ::System::Int32 NewDataSet::ThreadTargetDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XmlProfileParser::NewDataSet::ThreadTargetRow^  NewDataSet::ThreadTargetDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ThreadTargetDataTable::AddThreadTargetRow(XmlProfileParser::NewDataSet::ThreadTargetRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XmlProfileParser::NewDataSet::ThreadTargetRow^  NewDataSet::ThreadTargetDataTable::AddThreadTargetRow(System::UInt32 Thread, 
                System::UInt32 Weight, XmlProfileParser::NewDataSet::ThreadTargetsRow^  parentThreadTargetsRowByThreadTargets_ThreadTarget) {
        XmlProfileParser::NewDataSet::ThreadTargetRow^  rowThreadTargetRow = (cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {Thread, Weight, nullptr};
        if (parentThreadTargetsRowByThreadTargets_ThreadTarget != nullptr) {
            columnValuesArray[2] = parentThreadTargetsRowByThreadTargets_ThreadTarget[0];
        }
        rowThreadTargetRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowThreadTargetRow);
        return rowThreadTargetRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ThreadTargetDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ThreadTargetDataTable::Clone() {
        XmlProfileParser::NewDataSet::ThreadTargetDataTable^  cln = (cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ThreadTargetDataTable::CreateInstance() {
        return (gcnew XmlProfileParser::NewDataSet::ThreadTargetDataTable());
    }
    
    inline ::System::Void NewDataSet::ThreadTargetDataTable::InitVars() {
        this->columnThread = __super::Columns[L"Thread"];
        this->columnWeight = __super::Columns[L"Weight"];
        this->columnThreadTargets_Id = __super::Columns[L"ThreadTargets_Id"];
    }
    
    inline ::System::Void NewDataSet::ThreadTargetDataTable::InitClass() {
        this->columnThread = (gcnew ::System::Data::DataColumn(L"Thread", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnThread);
        this->columnWeight = (gcnew ::System::Data::DataColumn(L"Weight", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnWeight);
        this->columnThreadTargets_Id = (gcnew ::System::Data::DataColumn(L"ThreadTargets_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnThreadTargets_Id);
        this->columnThread->AllowDBNull = false;
    }
    
    inline XmlProfileParser::NewDataSet::ThreadTargetRow^  NewDataSet::ThreadTargetDataTable::NewThreadTargetRow() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ThreadTargetDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XmlProfileParser::NewDataSet::ThreadTargetRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ThreadTargetDataTable::GetRowType() {
        return XmlProfileParser::NewDataSet::ThreadTargetRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ThreadTargetDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ThreadTargetRowChanged(this, (gcnew XmlProfileParser::NewDataSet::ThreadTargetRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ThreadTargetDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ThreadTargetRowChanging(this, (gcnew XmlProfileParser::NewDataSet::ThreadTargetRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ThreadTargetDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ThreadTargetRowDeleted(this, (gcnew XmlProfileParser::NewDataSet::ThreadTargetRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ThreadTargetDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ThreadTargetRowDeleting(this, (gcnew XmlProfileParser::NewDataSet::ThreadTargetRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ThreadTargetDataTable::RemoveThreadTargetRow(XmlProfileParser::NewDataSet::ThreadTargetRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ThreadTargetDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XmlProfileParser::NewDataSet^  ds = (gcnew XmlProfileParser::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ThreadTargetDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::AffinityDataTable::AffinityDataTable() {
        this->TableName = L"Affinity";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::AffinityDataTable::AffinityDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::AffinityDataTable::AffinityDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::AffinityDataTable::Affinity_IdColumn::get() {
        return this->columnAffinity_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::AffinityDataTable::TimeSpan_IdColumn::get() {
        return this->columnTimeSpan_Id;
    }
    
    inline ::System::Int32 NewDataSet::AffinityDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XmlProfileParser::NewDataSet::AffinityRow^  NewDataSet::AffinityDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::AffinityDataTable::AddAffinityRow(XmlProfileParser::NewDataSet::AffinityRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XmlProfileParser::NewDataSet::AffinityRow^  NewDataSet::AffinityDataTable::AddAffinityRow(XmlProfileParser::NewDataSet::TimeSpanRow^  parentTimeSpanRowByTimeSpan_Affinity) {
        XmlProfileParser::NewDataSet::AffinityRow^  rowAffinityRow = (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentTimeSpanRowByTimeSpan_Affinity != nullptr) {
            columnValuesArray[1] = parentTimeSpanRowByTimeSpan_Affinity[13];
        }
        rowAffinityRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowAffinityRow);
        return rowAffinityRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::AffinityDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::AffinityDataTable::Clone() {
        XmlProfileParser::NewDataSet::AffinityDataTable^  cln = (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::AffinityDataTable::CreateInstance() {
        return (gcnew XmlProfileParser::NewDataSet::AffinityDataTable());
    }
    
    inline ::System::Void NewDataSet::AffinityDataTable::InitVars() {
        this->columnAffinity_Id = __super::Columns[L"Affinity_Id"];
        this->columnTimeSpan_Id = __super::Columns[L"TimeSpan_Id"];
    }
    
    inline ::System::Void NewDataSet::AffinityDataTable::InitClass() {
        this->columnAffinity_Id = (gcnew ::System::Data::DataColumn(L"Affinity_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnAffinity_Id);
        this->columnTimeSpan_Id = (gcnew ::System::Data::DataColumn(L"TimeSpan_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTimeSpan_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnAffinity_Id}, 
                true)));
        this->columnAffinity_Id->AutoIncrement = true;
        this->columnAffinity_Id->AllowDBNull = false;
        this->columnAffinity_Id->Unique = true;
    }
    
    inline XmlProfileParser::NewDataSet::AffinityRow^  NewDataSet::AffinityDataTable::NewAffinityRow() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::AffinityDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XmlProfileParser::NewDataSet::AffinityRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::AffinityDataTable::GetRowType() {
        return XmlProfileParser::NewDataSet::AffinityRow::typeid;
    }
    
    inline ::System::Void NewDataSet::AffinityDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->AffinityRowChanged(this, (gcnew XmlProfileParser::NewDataSet::AffinityRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::AffinityRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AffinityDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->AffinityRowChanging(this, (gcnew XmlProfileParser::NewDataSet::AffinityRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::AffinityRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AffinityDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->AffinityRowDeleted(this, (gcnew XmlProfileParser::NewDataSet::AffinityRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::AffinityRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AffinityDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->AffinityRowDeleting(this, (gcnew XmlProfileParser::NewDataSet::AffinityRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::AffinityRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AffinityDataTable::RemoveAffinityRow(XmlProfileParser::NewDataSet::AffinityRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::AffinityDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XmlProfileParser::NewDataSet^  ds = (gcnew XmlProfileParser::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"AffinityDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::AffinityAssignmentDataTable::AffinityAssignmentDataTable() {
        this->TableName = L"AffinityAssignment";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::AffinityAssignmentDataTable::AffinityAssignmentDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::AffinityAssignmentDataTable::AffinityAssignmentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::AffinityAssignmentDataTable::AffinityAssignment_ColumnColumn::get() {
        return this->columnAffinityAssignment_Column;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::AffinityAssignmentDataTable::Affinity_IdColumn::get() {
        return this->columnAffinity_Id;
    }
    
    inline ::System::Int32 NewDataSet::AffinityAssignmentDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XmlProfileParser::NewDataSet::AffinityAssignmentRow^  NewDataSet::AffinityAssignmentDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityAssignmentRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::AffinityAssignmentDataTable::AddAffinityAssignmentRow(XmlProfileParser::NewDataSet::AffinityAssignmentRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XmlProfileParser::NewDataSet::AffinityAssignmentRow^  NewDataSet::AffinityAssignmentDataTable::AddAffinityAssignmentRow(
                System::UInt32 AffinityAssignment_Column, XmlProfileParser::NewDataSet::AffinityRow^  parentAffinityRowByAffinity_AffinityAssignment) {
        XmlProfileParser::NewDataSet::AffinityAssignmentRow^  rowAffinityAssignmentRow = (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityAssignmentRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {AffinityAssignment_Column, 
            nullptr};
        if (parentAffinityRowByAffinity_AffinityAssignment != nullptr) {
            columnValuesArray[1] = parentAffinityRowByAffinity_AffinityAssignment[0];
        }
        rowAffinityAssignmentRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowAffinityAssignmentRow);
        return rowAffinityAssignmentRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::AffinityAssignmentDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::AffinityAssignmentDataTable::Clone() {
        XmlProfileParser::NewDataSet::AffinityAssignmentDataTable^  cln = (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityAssignmentDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::AffinityAssignmentDataTable::CreateInstance() {
        return (gcnew XmlProfileParser::NewDataSet::AffinityAssignmentDataTable());
    }
    
    inline ::System::Void NewDataSet::AffinityAssignmentDataTable::InitVars() {
        this->columnAffinityAssignment_Column = __super::Columns[L"AffinityAssignment_Column"];
        this->columnAffinity_Id = __super::Columns[L"Affinity_Id"];
    }
    
    inline ::System::Void NewDataSet::AffinityAssignmentDataTable::InitClass() {
        this->columnAffinityAssignment_Column = (gcnew ::System::Data::DataColumn(L"AffinityAssignment_Column", ::System::UInt32::typeid, 
            nullptr, ::System::Data::MappingType::SimpleContent));
        __super::Columns->Add(this->columnAffinityAssignment_Column);
        this->columnAffinity_Id = (gcnew ::System::Data::DataColumn(L"Affinity_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnAffinity_Id);
        this->columnAffinityAssignment_Column->AllowDBNull = false;
    }
    
    inline XmlProfileParser::NewDataSet::AffinityAssignmentRow^  NewDataSet::AffinityAssignmentDataTable::NewAffinityAssignmentRow() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityAssignmentRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::AffinityAssignmentDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XmlProfileParser::NewDataSet::AffinityAssignmentRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::AffinityAssignmentDataTable::GetRowType() {
        return XmlProfileParser::NewDataSet::AffinityAssignmentRow::typeid;
    }
    
    inline ::System::Void NewDataSet::AffinityAssignmentDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->AffinityAssignmentRowChanged(this, (gcnew XmlProfileParser::NewDataSet::AffinityAssignmentRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::AffinityAssignmentRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AffinityAssignmentDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->AffinityAssignmentRowChanging(this, (gcnew XmlProfileParser::NewDataSet::AffinityAssignmentRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::AffinityAssignmentRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AffinityAssignmentDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->AffinityAssignmentRowDeleted(this, (gcnew XmlProfileParser::NewDataSet::AffinityAssignmentRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::AffinityAssignmentRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AffinityAssignmentDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->AffinityAssignmentRowDeleting(this, (gcnew XmlProfileParser::NewDataSet::AffinityAssignmentRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::AffinityAssignmentRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AffinityAssignmentDataTable::RemoveAffinityAssignmentRow(XmlProfileParser::NewDataSet::AffinityAssignmentRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::AffinityAssignmentDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XmlProfileParser::NewDataSet^  ds = (gcnew XmlProfileParser::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"AffinityAssignmentDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::AffinityGroupAssignmentDataTable::AffinityGroupAssignmentDataTable() {
        this->TableName = L"AffinityGroupAssignment";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::AffinityGroupAssignmentDataTable::AffinityGroupAssignmentDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::AffinityGroupAssignmentDataTable::AffinityGroupAssignmentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::AffinityGroupAssignmentDataTable::GroupColumn::get() {
        return this->columnGroup;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::AffinityGroupAssignmentDataTable::ProcessorColumn::get() {
        return this->columnProcessor;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::AffinityGroupAssignmentDataTable::Affinity_IdColumn::get() {
        return this->columnAffinity_Id;
    }
    
    inline ::System::Int32 NewDataSet::AffinityGroupAssignmentDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  NewDataSet::AffinityGroupAssignmentDataTable::default::get(
                ::System::Int32 index) {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::AffinityGroupAssignmentDataTable::AddAffinityGroupAssignmentRow(XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  NewDataSet::AffinityGroupAssignmentDataTable::AddAffinityGroupAssignmentRow(
                System::UInt32 Group, System::UInt32 Processor, XmlProfileParser::NewDataSet::AffinityRow^  parentAffinityRowByAffinity_AffinityGroupAssignment) {
        XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  rowAffinityGroupAssignmentRow = (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {Group, Processor, nullptr};
        if (parentAffinityRowByAffinity_AffinityGroupAssignment != nullptr) {
            columnValuesArray[2] = parentAffinityRowByAffinity_AffinityGroupAssignment[0];
        }
        rowAffinityGroupAssignmentRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowAffinityGroupAssignmentRow);
        return rowAffinityGroupAssignmentRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::AffinityGroupAssignmentDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::AffinityGroupAssignmentDataTable::Clone() {
        XmlProfileParser::NewDataSet::AffinityGroupAssignmentDataTable^  cln = (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityGroupAssignmentDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::AffinityGroupAssignmentDataTable::CreateInstance() {
        return (gcnew XmlProfileParser::NewDataSet::AffinityGroupAssignmentDataTable());
    }
    
    inline ::System::Void NewDataSet::AffinityGroupAssignmentDataTable::InitVars() {
        this->columnGroup = __super::Columns[L"Group"];
        this->columnProcessor = __super::Columns[L"Processor"];
        this->columnAffinity_Id = __super::Columns[L"Affinity_Id"];
    }
    
    inline ::System::Void NewDataSet::AffinityGroupAssignmentDataTable::InitClass() {
        this->columnGroup = (gcnew ::System::Data::DataColumn(L"Group", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnGroup);
        this->columnProcessor = (gcnew ::System::Data::DataColumn(L"Processor", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnProcessor);
        this->columnAffinity_Id = (gcnew ::System::Data::DataColumn(L"Affinity_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnAffinity_Id);
        this->columnGroup->Namespace = L"";
        this->columnProcessor->Namespace = L"";
    }
    
    inline XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  NewDataSet::AffinityGroupAssignmentDataTable::NewAffinityGroupAssignmentRow() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::AffinityGroupAssignmentDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::AffinityGroupAssignmentDataTable::GetRowType() {
        return XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow::typeid;
    }
    
    inline ::System::Void NewDataSet::AffinityGroupAssignmentDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->AffinityGroupAssignmentRowChanged(this, (gcnew XmlProfileParser::NewDataSet::AffinityGroupAssignmentRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AffinityGroupAssignmentDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->AffinityGroupAssignmentRowChanging(this, (gcnew XmlProfileParser::NewDataSet::AffinityGroupAssignmentRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AffinityGroupAssignmentDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->AffinityGroupAssignmentRowDeleted(this, (gcnew XmlProfileParser::NewDataSet::AffinityGroupAssignmentRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AffinityGroupAssignmentDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->AffinityGroupAssignmentRowDeleting(this, (gcnew XmlProfileParser::NewDataSet::AffinityGroupAssignmentRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AffinityGroupAssignmentDataTable::RemoveAffinityGroupAssignmentRow(XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::AffinityGroupAssignmentDataTable::GetTypedTableSchema(
                ::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XmlProfileParser::NewDataSet^  ds = (gcnew XmlProfileParser::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"AffinityGroupAssignmentDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ETWDataTable::ETWDataTable() {
        this->TableName = L"ETW";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ETWDataTable::ETWDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ETWDataTable::ETWDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ETWDataTable::ProcessColumn::get() {
        return this->columnProcess;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ETWDataTable::ThreadColumn::get() {
        return this->columnThread;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ETWDataTable::ImageLoadColumn::get() {
        return this->columnImageLoad;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ETWDataTable::DiskIOColumn::get() {
        return this->columnDiskIO;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ETWDataTable::MemoryPageFaultsColumn::get() {
        return this->columnMemoryPageFaults;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ETWDataTable::MemoryHardFaultsColumn::get() {
        return this->columnMemoryHardFaults;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ETWDataTable::NetworkColumn::get() {
        return this->columnNetwork;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ETWDataTable::RegistryColumn::get() {
        return this->columnRegistry;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ETWDataTable::UsePagedMemoryColumn::get() {
        return this->columnUsePagedMemory;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ETWDataTable::UsePerfTimerColumn::get() {
        return this->columnUsePerfTimer;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ETWDataTable::UseSystemTimerColumn::get() {
        return this->columnUseSystemTimer;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ETWDataTable::UseCyclesCounterColumn::get() {
        return this->columnUseCyclesCounter;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ETWDataTable::Profile_IdColumn::get() {
        return this->columnProfile_Id;
    }
    
    inline ::System::Int32 NewDataSet::ETWDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline XmlProfileParser::NewDataSet::ETWRow^  NewDataSet::ETWDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::ETWRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ETWDataTable::AddETWRow(XmlProfileParser::NewDataSet::ETWRow^  row) {
        this->Rows->Add(row);
    }
    
    inline XmlProfileParser::NewDataSet::ETWRow^  NewDataSet::ETWDataTable::AddETWRow(
                System::Boolean Process, 
                System::Boolean Thread, 
                System::Boolean ImageLoad, 
                System::Boolean DiskIO, 
                System::Boolean MemoryPageFaults, 
                System::Boolean MemoryHardFaults, 
                System::Boolean Network, 
                System::Boolean Registry, 
                System::Boolean UsePagedMemory, 
                System::Boolean UsePerfTimer, 
                System::Boolean UseSystemTimer, 
                System::Boolean UseCyclesCounter, 
                XmlProfileParser::NewDataSet::ProfileRow^  parentProfileRowByProfile_ETW) {
        XmlProfileParser::NewDataSet::ETWRow^  rowETWRow = (cli::safe_cast<XmlProfileParser::NewDataSet::ETWRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(13) {Process, Thread, ImageLoad, 
            DiskIO, MemoryPageFaults, MemoryHardFaults, Network, Registry, UsePagedMemory, UsePerfTimer, UseSystemTimer, UseCyclesCounter, 
            nullptr};
        if (parentProfileRowByProfile_ETW != nullptr) {
            columnValuesArray[12] = parentProfileRowByProfile_ETW[4];
        }
        rowETWRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowETWRow);
        return rowETWRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ETWDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ETWDataTable::Clone() {
        XmlProfileParser::NewDataSet::ETWDataTable^  cln = (cli::safe_cast<XmlProfileParser::NewDataSet::ETWDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ETWDataTable::CreateInstance() {
        return (gcnew XmlProfileParser::NewDataSet::ETWDataTable());
    }
    
    inline ::System::Void NewDataSet::ETWDataTable::InitVars() {
        this->columnProcess = __super::Columns[L"Process"];
        this->columnThread = __super::Columns[L"Thread"];
        this->columnImageLoad = __super::Columns[L"ImageLoad"];
        this->columnDiskIO = __super::Columns[L"DiskIO"];
        this->columnMemoryPageFaults = __super::Columns[L"MemoryPageFaults"];
        this->columnMemoryHardFaults = __super::Columns[L"MemoryHardFaults"];
        this->columnNetwork = __super::Columns[L"Network"];
        this->columnRegistry = __super::Columns[L"Registry"];
        this->columnUsePagedMemory = __super::Columns[L"UsePagedMemory"];
        this->columnUsePerfTimer = __super::Columns[L"UsePerfTimer"];
        this->columnUseSystemTimer = __super::Columns[L"UseSystemTimer"];
        this->columnUseCyclesCounter = __super::Columns[L"UseCyclesCounter"];
        this->columnProfile_Id = __super::Columns[L"Profile_Id"];
    }
    
    inline ::System::Void NewDataSet::ETWDataTable::InitClass() {
        this->columnProcess = (gcnew ::System::Data::DataColumn(L"Process", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnProcess);
        this->columnThread = (gcnew ::System::Data::DataColumn(L"Thread", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnThread);
        this->columnImageLoad = (gcnew ::System::Data::DataColumn(L"ImageLoad", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnImageLoad);
        this->columnDiskIO = (gcnew ::System::Data::DataColumn(L"DiskIO", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDiskIO);
        this->columnMemoryPageFaults = (gcnew ::System::Data::DataColumn(L"MemoryPageFaults", ::System::Boolean::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnMemoryPageFaults);
        this->columnMemoryHardFaults = (gcnew ::System::Data::DataColumn(L"MemoryHardFaults", ::System::Boolean::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnMemoryHardFaults);
        this->columnNetwork = (gcnew ::System::Data::DataColumn(L"Network", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnNetwork);
        this->columnRegistry = (gcnew ::System::Data::DataColumn(L"Registry", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnRegistry);
        this->columnUsePagedMemory = (gcnew ::System::Data::DataColumn(L"UsePagedMemory", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnUsePagedMemory);
        this->columnUsePerfTimer = (gcnew ::System::Data::DataColumn(L"UsePerfTimer", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnUsePerfTimer);
        this->columnUseSystemTimer = (gcnew ::System::Data::DataColumn(L"UseSystemTimer", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnUseSystemTimer);
        this->columnUseCyclesCounter = (gcnew ::System::Data::DataColumn(L"UseCyclesCounter", ::System::Boolean::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnUseCyclesCounter);
        this->columnProfile_Id = (gcnew ::System::Data::DataColumn(L"Profile_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnProfile_Id);
    }
    
    inline XmlProfileParser::NewDataSet::ETWRow^  NewDataSet::ETWDataTable::NewETWRow() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::ETWRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ETWDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew XmlProfileParser::NewDataSet::ETWRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ETWDataTable::GetRowType() {
        return XmlProfileParser::NewDataSet::ETWRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ETWDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ETWRowChanged(this, (gcnew XmlProfileParser::NewDataSet::ETWRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ETWRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ETWDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ETWRowChanging(this, (gcnew XmlProfileParser::NewDataSet::ETWRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ETWRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ETWDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ETWRowDeleted(this, (gcnew XmlProfileParser::NewDataSet::ETWRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ETWRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ETWDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ETWRowDeleting(this, (gcnew XmlProfileParser::NewDataSet::ETWRowChangeEvent((cli::safe_cast<XmlProfileParser::NewDataSet::ETWRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ETWDataTable::RemoveETWRow(XmlProfileParser::NewDataSet::ETWRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ETWDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        XmlProfileParser::NewDataSet^  ds = (gcnew XmlProfileParser::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ETWDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ProfileRow::ProfileRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableProfile = (cli::safe_cast<XmlProfileParser::NewDataSet::ProfileDataTable^  >(this->Table));
    }
    
    inline System::Boolean NewDataSet::ProfileRow::Verbose::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableProfile->VerboseColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Verbose\' in table \'Profile\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ProfileRow::Verbose::set(System::Boolean value) {
        this[this->tableProfile->VerboseColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::ProfileRow::Progress::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableProfile->ProgressColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Progress\' in table \'Profile\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ProfileRow::Progress::set(System::UInt32 value) {
        this[this->tableProfile->ProgressColumn] = value;
    }
    
    inline System::String^  NewDataSet::ProfileRow::ResultFormat::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableProfile->ResultFormatColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ResultFormat\' in table \'Profile\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ProfileRow::ResultFormat::set(System::String^  value) {
        this[this->tableProfile->ResultFormatColumn] = value;
    }
    
    inline System::String^  NewDataSet::ProfileRow::PrecreateFiles::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableProfile->PrecreateFilesColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PrecreateFiles\' in table \'Profile\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ProfileRow::PrecreateFiles::set(System::String^  value) {
        this[this->tableProfile->PrecreateFilesColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ProfileRow::Profile_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableProfile->Profile_IdColumn]));
    }
    inline System::Void NewDataSet::ProfileRow::Profile_Id::set(System::Int32 value) {
        this[this->tableProfile->Profile_IdColumn] = value;
    }
    
    inline ::System::Boolean NewDataSet::ProfileRow::IsVerboseNull() {
        return this->IsNull(this->tableProfile->VerboseColumn);
    }
    
    inline ::System::Void NewDataSet::ProfileRow::SetVerboseNull() {
        this[this->tableProfile->VerboseColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ProfileRow::IsProgressNull() {
        return this->IsNull(this->tableProfile->ProgressColumn);
    }
    
    inline ::System::Void NewDataSet::ProfileRow::SetProgressNull() {
        this[this->tableProfile->ProgressColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ProfileRow::IsResultFormatNull() {
        return this->IsNull(this->tableProfile->ResultFormatColumn);
    }
    
    inline ::System::Void NewDataSet::ProfileRow::SetResultFormatNull() {
        this[this->tableProfile->ResultFormatColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ProfileRow::IsPrecreateFilesNull() {
        return this->IsNull(this->tableProfile->PrecreateFilesColumn);
    }
    
    inline ::System::Void NewDataSet::ProfileRow::SetPrecreateFilesNull() {
        this[this->tableProfile->PrecreateFilesColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< XmlProfileParser::NewDataSet::TimeSpansRow^  >^  NewDataSet::ProfileRow::GetTimeSpansRows() {
        if (this->Table->ChildRelations[L"Profile_TimeSpans"] == nullptr) {
            return gcnew cli::array< XmlProfileParser::NewDataSet::TimeSpansRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< XmlProfileParser::NewDataSet::TimeSpansRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Profile_TimeSpans"])));
        }
    }
    
    inline cli::array< XmlProfileParser::NewDataSet::ETWRow^  >^  NewDataSet::ProfileRow::GetETWRows() {
        if (this->Table->ChildRelations[L"Profile_ETW"] == nullptr) {
            return gcnew cli::array< XmlProfileParser::NewDataSet::ETWRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< XmlProfileParser::NewDataSet::ETWRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Profile_ETW"])));
        }
    }
    
    
    inline NewDataSet::TimeSpansRow::TimeSpansRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableTimeSpans = (cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpansDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::TimeSpansRow::TimeSpans_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableTimeSpans->TimeSpans_IdColumn]));
    }
    inline System::Void NewDataSet::TimeSpansRow::TimeSpans_Id::set(System::Int32 value) {
        this[this->tableTimeSpans->TimeSpans_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::TimeSpansRow::Profile_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableTimeSpans->Profile_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Profile_Id\' in table \'TimeSpans\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TimeSpansRow::Profile_Id::set(System::Int32 value) {
        this[this->tableTimeSpans->Profile_IdColumn] = value;
    }
    
    inline XmlProfileParser::NewDataSet::ProfileRow^  NewDataSet::TimeSpansRow::ProfileRow::get() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::ProfileRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Profile_TimeSpans"])));
    }
    inline System::Void NewDataSet::TimeSpansRow::ProfileRow::set(XmlProfileParser::NewDataSet::ProfileRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Profile_TimeSpans"]);
    }
    
    inline ::System::Boolean NewDataSet::TimeSpansRow::IsProfile_IdNull() {
        return this->IsNull(this->tableTimeSpans->Profile_IdColumn);
    }
    
    inline ::System::Void NewDataSet::TimeSpansRow::SetProfile_IdNull() {
        this[this->tableTimeSpans->Profile_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< XmlProfileParser::NewDataSet::TimeSpanRow^  >^  NewDataSet::TimeSpansRow::GetTimeSpanRows() {
        if (this->Table->ChildRelations[L"TimeSpans_TimeSpan"] == nullptr) {
            return gcnew cli::array< XmlProfileParser::NewDataSet::TimeSpanRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< XmlProfileParser::NewDataSet::TimeSpanRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TimeSpans_TimeSpan"])));
        }
    }
    
    
    inline NewDataSet::TimeSpanRow::TimeSpanRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableTimeSpan = (cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpanDataTable^  >(this->Table));
    }
    
    inline System::UInt32 NewDataSet::TimeSpanRow::Duration::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTimeSpan->DurationColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Duration\' in table \'TimeSpan\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TimeSpanRow::Duration::set(System::UInt32 value) {
        this[this->tableTimeSpan->DurationColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::TimeSpanRow::Warmup::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTimeSpan->WarmupColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Warmup\' in table \'TimeSpan\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TimeSpanRow::Warmup::set(System::UInt32 value) {
        this[this->tableTimeSpan->WarmupColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::TimeSpanRow::Cooldown::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTimeSpan->CooldownColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Cooldown\' in table \'TimeSpan\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TimeSpanRow::Cooldown::set(System::UInt32 value) {
        this[this->tableTimeSpan->CooldownColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::TimeSpanRow::RandSeed::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTimeSpan->RandSeedColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'RandSeed\' in table \'TimeSpan\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TimeSpanRow::RandSeed::set(System::UInt32 value) {
        this[this->tableTimeSpan->RandSeedColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TimeSpanRow::RandomWriteData::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTimeSpan->RandomWriteDataColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'RandomWriteData\' in table \'TimeSpan\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TimeSpanRow::RandomWriteData::set(System::Boolean value) {
        this[this->tableTimeSpan->RandomWriteDataColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::TimeSpanRow::ThreadCount::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTimeSpan->ThreadCountColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ThreadCount\' in table \'TimeSpan\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TimeSpanRow::ThreadCount::set(System::UInt32 value) {
        this[this->tableTimeSpan->ThreadCountColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::TimeSpanRow::RequestCount::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTimeSpan->RequestCountColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'RequestCount\' in table \'TimeSpan\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TimeSpanRow::RequestCount::set(System::UInt32 value) {
        this[this->tableTimeSpan->RequestCountColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TimeSpanRow::GroupAffinity::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTimeSpan->GroupAffinityColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'GroupAffinity\' in table \'TimeSpan\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TimeSpanRow::GroupAffinity::set(System::Boolean value) {
        this[this->tableTimeSpan->GroupAffinityColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TimeSpanRow::DisableAffinity::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTimeSpan->DisableAffinityColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DisableAffinity\' in table \'TimeSpan\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TimeSpanRow::DisableAffinity::set(System::Boolean value) {
        this[this->tableTimeSpan->DisableAffinityColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TimeSpanRow::CompletionRoutines::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTimeSpan->CompletionRoutinesColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CompletionRoutines\' in table \'TimeSpan\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TimeSpanRow::CompletionRoutines::set(System::Boolean value) {
        this[this->tableTimeSpan->CompletionRoutinesColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TimeSpanRow::MeasureLatency::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTimeSpan->MeasureLatencyColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'MeasureLatency\' in table \'TimeSpan\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TimeSpanRow::MeasureLatency::set(System::Boolean value) {
        this[this->tableTimeSpan->MeasureLatencyColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TimeSpanRow::CalculateIopsStdDev::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTimeSpan->CalculateIopsStdDevColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CalculateIopsStdDev\' in table \'TimeSpan\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TimeSpanRow::CalculateIopsStdDev::set(System::Boolean value) {
        this[this->tableTimeSpan->CalculateIopsStdDevColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::TimeSpanRow::IoBucketDuration::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTimeSpan->IoBucketDurationColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IoBucketDuration\' in table \'TimeSpan\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TimeSpanRow::IoBucketDuration::set(System::UInt32 value) {
        this[this->tableTimeSpan->IoBucketDurationColumn] = value;
    }
    
    inline System::Int32 NewDataSet::TimeSpanRow::TimeSpan_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableTimeSpan->TimeSpan_IdColumn]));
    }
    inline System::Void NewDataSet::TimeSpanRow::TimeSpan_Id::set(System::Int32 value) {
        this[this->tableTimeSpan->TimeSpan_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::TimeSpanRow::TimeSpans_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableTimeSpan->TimeSpans_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TimeSpans_Id\' in table \'TimeSpan\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TimeSpanRow::TimeSpans_Id::set(System::Int32 value) {
        this[this->tableTimeSpan->TimeSpans_IdColumn] = value;
    }
    
    inline XmlProfileParser::NewDataSet::TimeSpansRow^  NewDataSet::TimeSpanRow::TimeSpansRow::get() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpansRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TimeSpans_TimeSpan"])));
    }
    inline System::Void NewDataSet::TimeSpanRow::TimeSpansRow::set(XmlProfileParser::NewDataSet::TimeSpansRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"TimeSpans_TimeSpan"]);
    }
    
    inline ::System::Boolean NewDataSet::TimeSpanRow::IsDurationNull() {
        return this->IsNull(this->tableTimeSpan->DurationColumn);
    }
    
    inline ::System::Void NewDataSet::TimeSpanRow::SetDurationNull() {
        this[this->tableTimeSpan->DurationColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TimeSpanRow::IsWarmupNull() {
        return this->IsNull(this->tableTimeSpan->WarmupColumn);
    }
    
    inline ::System::Void NewDataSet::TimeSpanRow::SetWarmupNull() {
        this[this->tableTimeSpan->WarmupColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TimeSpanRow::IsCooldownNull() {
        return this->IsNull(this->tableTimeSpan->CooldownColumn);
    }
    
    inline ::System::Void NewDataSet::TimeSpanRow::SetCooldownNull() {
        this[this->tableTimeSpan->CooldownColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TimeSpanRow::IsRandSeedNull() {
        return this->IsNull(this->tableTimeSpan->RandSeedColumn);
    }
    
    inline ::System::Void NewDataSet::TimeSpanRow::SetRandSeedNull() {
        this[this->tableTimeSpan->RandSeedColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TimeSpanRow::IsRandomWriteDataNull() {
        return this->IsNull(this->tableTimeSpan->RandomWriteDataColumn);
    }
    
    inline ::System::Void NewDataSet::TimeSpanRow::SetRandomWriteDataNull() {
        this[this->tableTimeSpan->RandomWriteDataColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TimeSpanRow::IsThreadCountNull() {
        return this->IsNull(this->tableTimeSpan->ThreadCountColumn);
    }
    
    inline ::System::Void NewDataSet::TimeSpanRow::SetThreadCountNull() {
        this[this->tableTimeSpan->ThreadCountColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TimeSpanRow::IsRequestCountNull() {
        return this->IsNull(this->tableTimeSpan->RequestCountColumn);
    }
    
    inline ::System::Void NewDataSet::TimeSpanRow::SetRequestCountNull() {
        this[this->tableTimeSpan->RequestCountColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TimeSpanRow::IsGroupAffinityNull() {
        return this->IsNull(this->tableTimeSpan->GroupAffinityColumn);
    }
    
    inline ::System::Void NewDataSet::TimeSpanRow::SetGroupAffinityNull() {
        this[this->tableTimeSpan->GroupAffinityColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TimeSpanRow::IsDisableAffinityNull() {
        return this->IsNull(this->tableTimeSpan->DisableAffinityColumn);
    }
    
    inline ::System::Void NewDataSet::TimeSpanRow::SetDisableAffinityNull() {
        this[this->tableTimeSpan->DisableAffinityColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TimeSpanRow::IsCompletionRoutinesNull() {
        return this->IsNull(this->tableTimeSpan->CompletionRoutinesColumn);
    }
    
    inline ::System::Void NewDataSet::TimeSpanRow::SetCompletionRoutinesNull() {
        this[this->tableTimeSpan->CompletionRoutinesColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TimeSpanRow::IsMeasureLatencyNull() {
        return this->IsNull(this->tableTimeSpan->MeasureLatencyColumn);
    }
    
    inline ::System::Void NewDataSet::TimeSpanRow::SetMeasureLatencyNull() {
        this[this->tableTimeSpan->MeasureLatencyColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TimeSpanRow::IsCalculateIopsStdDevNull() {
        return this->IsNull(this->tableTimeSpan->CalculateIopsStdDevColumn);
    }
    
    inline ::System::Void NewDataSet::TimeSpanRow::SetCalculateIopsStdDevNull() {
        this[this->tableTimeSpan->CalculateIopsStdDevColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TimeSpanRow::IsIoBucketDurationNull() {
        return this->IsNull(this->tableTimeSpan->IoBucketDurationColumn);
    }
    
    inline ::System::Void NewDataSet::TimeSpanRow::SetIoBucketDurationNull() {
        this[this->tableTimeSpan->IoBucketDurationColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TimeSpanRow::IsTimeSpans_IdNull() {
        return this->IsNull(this->tableTimeSpan->TimeSpans_IdColumn);
    }
    
    inline ::System::Void NewDataSet::TimeSpanRow::SetTimeSpans_IdNull() {
        this[this->tableTimeSpan->TimeSpans_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< XmlProfileParser::NewDataSet::TargetsRow^  >^  NewDataSet::TimeSpanRow::GetTargetsRows() {
        if (this->Table->ChildRelations[L"TimeSpan_Targets"] == nullptr) {
            return gcnew cli::array< XmlProfileParser::NewDataSet::TargetsRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< XmlProfileParser::NewDataSet::TargetsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TimeSpan_Targets"])));
        }
    }
    
    inline cli::array< XmlProfileParser::NewDataSet::AffinityRow^  >^  NewDataSet::TimeSpanRow::GetAffinityRows() {
        if (this->Table->ChildRelations[L"TimeSpan_Affinity"] == nullptr) {
            return gcnew cli::array< XmlProfileParser::NewDataSet::AffinityRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< XmlProfileParser::NewDataSet::AffinityRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TimeSpan_Affinity"])));
        }
    }
    
    
    inline NewDataSet::TargetsRow::TargetsRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableTargets = (cli::safe_cast<XmlProfileParser::NewDataSet::TargetsDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::TargetsRow::Targets_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableTargets->Targets_IdColumn]));
    }
    inline System::Void NewDataSet::TargetsRow::Targets_Id::set(System::Int32 value) {
        this[this->tableTargets->Targets_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::TargetsRow::TimeSpan_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableTargets->TimeSpan_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TimeSpan_Id\' in table \'Targets\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetsRow::TimeSpan_Id::set(System::Int32 value) {
        this[this->tableTargets->TimeSpan_IdColumn] = value;
    }
    
    inline XmlProfileParser::NewDataSet::TimeSpanRow^  NewDataSet::TargetsRow::TimeSpanRow::get() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TimeSpan_Targets"])));
    }
    inline System::Void NewDataSet::TargetsRow::TimeSpanRow::set(XmlProfileParser::NewDataSet::TimeSpanRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"TimeSpan_Targets"]);
    }
    
    inline ::System::Boolean NewDataSet::TargetsRow::IsTimeSpan_IdNull() {
        return this->IsNull(this->tableTargets->TimeSpan_IdColumn);
    }
    
    inline ::System::Void NewDataSet::TargetsRow::SetTimeSpan_IdNull() {
        this[this->tableTargets->TimeSpan_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< XmlProfileParser::NewDataSet::TargetRow^  >^  NewDataSet::TargetsRow::GetTargetRows() {
        if (this->Table->ChildRelations[L"Targets_Target"] == nullptr) {
            return gcnew cli::array< XmlProfileParser::NewDataSet::TargetRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< XmlProfileParser::NewDataSet::TargetRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Targets_Target"])));
        }
    }
    
    
    inline NewDataSet::TargetRow::TargetRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableTarget = (cli::safe_cast<XmlProfileParser::NewDataSet::TargetDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::TargetRow::Path::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableTarget->PathColumn]));
    }
    inline System::Void NewDataSet::TargetRow::Path::set(System::String^  value) {
        this[this->tableTarget->PathColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::TargetRow::BlockSize::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTarget->BlockSizeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'BlockSize\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::BlockSize::set(System::UInt32 value) {
        this[this->tableTarget->BlockSizeColumn] = value;
    }
    
    inline System::UInt64 NewDataSet::TargetRow::StrideSize::get() {
        try {
            return (cli::safe_cast<::System::UInt64 >(this[this->tableTarget->StrideSizeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'StrideSize\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::StrideSize::set(System::UInt64 value) {
        this[this->tableTarget->StrideSizeColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TargetRow::InterlockedSequential::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTarget->InterlockedSequentialColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'InterlockedSequential\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::InterlockedSequential::set(System::Boolean value) {
        this[this->tableTarget->InterlockedSequentialColumn] = value;
    }
    
    inline System::UInt64 NewDataSet::TargetRow::BaseFileOffset::get() {
        try {
            return (cli::safe_cast<::System::UInt64 >(this[this->tableTarget->BaseFileOffsetColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'BaseFileOffset\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::BaseFileOffset::set(System::UInt64 value) {
        this[this->tableTarget->BaseFileOffsetColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TargetRow::SequentialScan::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTarget->SequentialScanColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'SequentialScan\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::SequentialScan::set(System::Boolean value) {
        this[this->tableTarget->SequentialScanColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TargetRow::RandomAccess::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTarget->RandomAccessColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'RandomAccess\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::RandomAccess::set(System::Boolean value) {
        this[this->tableTarget->RandomAccessColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TargetRow::TemporaryFile::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTarget->TemporaryFileColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TemporaryFile\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::TemporaryFile::set(System::Boolean value) {
        this[this->tableTarget->TemporaryFileColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TargetRow::UseLargePages::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTarget->UseLargePagesColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'UseLargePages\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::UseLargePages::set(System::Boolean value) {
        this[this->tableTarget->UseLargePagesColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::TargetRow::RequestCount::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTarget->RequestCountColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'RequestCount\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::RequestCount::set(System::UInt32 value) {
        this[this->tableTarget->RequestCountColumn] = value;
    }
    
    inline System::UInt64 NewDataSet::TargetRow::Random::get() {
        try {
            return (cli::safe_cast<::System::UInt64 >(this[this->tableTarget->RandomColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Random\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::Random::set(System::UInt64 value) {
        this[this->tableTarget->RandomColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TargetRow::DisableAllCache::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTarget->DisableAllCacheColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DisableAllCache\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::DisableAllCache::set(System::Boolean value) {
        this[this->tableTarget->DisableAllCacheColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TargetRow::DisableLocalCache::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTarget->DisableLocalCacheColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DisableLocalCache\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::DisableLocalCache::set(System::Boolean value) {
        this[this->tableTarget->DisableLocalCacheColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TargetRow::DisableOSCache::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTarget->DisableOSCacheColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DisableOSCache\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::DisableOSCache::set(System::Boolean value) {
        this[this->tableTarget->DisableOSCacheColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TargetRow::WriteThrough::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTarget->WriteThroughColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WriteThrough\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::WriteThrough::set(System::Boolean value) {
        this[this->tableTarget->WriteThroughColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TargetRow::MemoryMappedIo::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTarget->MemoryMappedIoColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'MemoryMappedIo\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::MemoryMappedIo::set(System::Boolean value) {
        this[this->tableTarget->MemoryMappedIoColumn] = value;
    }
    
    inline System::String^  NewDataSet::TargetRow::FlushType::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTarget->FlushTypeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'FlushType\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::FlushType::set(System::String^  value) {
        this[this->tableTarget->FlushTypeColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::TargetRow::BurstSize::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTarget->BurstSizeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'BurstSize\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::BurstSize::set(System::UInt32 value) {
        this[this->tableTarget->BurstSizeColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::TargetRow::ThinkTime::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTarget->ThinkTimeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ThinkTime\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::ThinkTime::set(System::UInt32 value) {
        this[this->tableTarget->ThinkTimeColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::TargetRow::Throughput::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTarget->ThroughputColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Throughput\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::Throughput::set(System::UInt32 value) {
        this[this->tableTarget->ThroughputColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::TargetRow::ThreadsPerFile::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTarget->ThreadsPerFileColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ThreadsPerFile\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::ThreadsPerFile::set(System::UInt32 value) {
        this[this->tableTarget->ThreadsPerFileColumn] = value;
    }
    
    inline System::UInt64 NewDataSet::TargetRow::FileSize::get() {
        try {
            return (cli::safe_cast<::System::UInt64 >(this[this->tableTarget->FileSizeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'FileSize\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::FileSize::set(System::UInt64 value) {
        this[this->tableTarget->FileSizeColumn] = value;
    }
    
    inline System::UInt64 NewDataSet::TargetRow::MaxFileSize::get() {
        try {
            return (cli::safe_cast<::System::UInt64 >(this[this->tableTarget->MaxFileSizeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'MaxFileSize\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::MaxFileSize::set(System::UInt64 value) {
        this[this->tableTarget->MaxFileSizeColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::TargetRow::WriteRatio::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTarget->WriteRatioColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WriteRatio\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::WriteRatio::set(System::UInt32 value) {
        this[this->tableTarget->WriteRatioColumn] = value;
    }
    
    inline System::Boolean NewDataSet::TargetRow::ParallelAsyncIO::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableTarget->ParallelAsyncIOColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ParallelAsyncIO\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::ParallelAsyncIO::set(System::Boolean value) {
        this[this->tableTarget->ParallelAsyncIOColumn] = value;
    }
    
    inline System::UInt64 NewDataSet::TargetRow::ThreadStride::get() {
        try {
            return (cli::safe_cast<::System::UInt64 >(this[this->tableTarget->ThreadStrideColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ThreadStride\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::ThreadStride::set(System::UInt64 value) {
        this[this->tableTarget->ThreadStrideColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::TargetRow::IOPriority::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTarget->IOPriorityColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IOPriority\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::IOPriority::set(System::UInt32 value) {
        this[this->tableTarget->IOPriorityColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::TargetRow::Weight::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableTarget->WeightColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Weight\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::Weight::set(System::UInt32 value) {
        this[this->tableTarget->WeightColumn] = value;
    }
    
    inline System::Int32 NewDataSet::TargetRow::Target_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableTarget->Target_IdColumn]));
    }
    inline System::Void NewDataSet::TargetRow::Target_Id::set(System::Int32 value) {
        this[this->tableTarget->Target_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::TargetRow::Targets_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableTarget->Targets_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Targets_Id\' in table \'Target\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TargetRow::Targets_Id::set(System::Int32 value) {
        this[this->tableTarget->Targets_IdColumn] = value;
    }
    
    inline XmlProfileParser::NewDataSet::TargetsRow^  NewDataSet::TargetRow::TargetsRow::get() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::TargetsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Targets_Target"])));
    }
    inline System::Void NewDataSet::TargetRow::TargetsRow::set(XmlProfileParser::NewDataSet::TargetsRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Targets_Target"]);
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsBlockSizeNull() {
        return this->IsNull(this->tableTarget->BlockSizeColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetBlockSizeNull() {
        this[this->tableTarget->BlockSizeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsStrideSizeNull() {
        return this->IsNull(this->tableTarget->StrideSizeColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetStrideSizeNull() {
        this[this->tableTarget->StrideSizeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsInterlockedSequentialNull() {
        return this->IsNull(this->tableTarget->InterlockedSequentialColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetInterlockedSequentialNull() {
        this[this->tableTarget->InterlockedSequentialColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsBaseFileOffsetNull() {
        return this->IsNull(this->tableTarget->BaseFileOffsetColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetBaseFileOffsetNull() {
        this[this->tableTarget->BaseFileOffsetColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsSequentialScanNull() {
        return this->IsNull(this->tableTarget->SequentialScanColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetSequentialScanNull() {
        this[this->tableTarget->SequentialScanColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsRandomAccessNull() {
        return this->IsNull(this->tableTarget->RandomAccessColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetRandomAccessNull() {
        this[this->tableTarget->RandomAccessColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsTemporaryFileNull() {
        return this->IsNull(this->tableTarget->TemporaryFileColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetTemporaryFileNull() {
        this[this->tableTarget->TemporaryFileColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsUseLargePagesNull() {
        return this->IsNull(this->tableTarget->UseLargePagesColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetUseLargePagesNull() {
        this[this->tableTarget->UseLargePagesColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsRequestCountNull() {
        return this->IsNull(this->tableTarget->RequestCountColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetRequestCountNull() {
        this[this->tableTarget->RequestCountColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsRandomNull() {
        return this->IsNull(this->tableTarget->RandomColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetRandomNull() {
        this[this->tableTarget->RandomColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsDisableAllCacheNull() {
        return this->IsNull(this->tableTarget->DisableAllCacheColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetDisableAllCacheNull() {
        this[this->tableTarget->DisableAllCacheColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsDisableLocalCacheNull() {
        return this->IsNull(this->tableTarget->DisableLocalCacheColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetDisableLocalCacheNull() {
        this[this->tableTarget->DisableLocalCacheColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsDisableOSCacheNull() {
        return this->IsNull(this->tableTarget->DisableOSCacheColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetDisableOSCacheNull() {
        this[this->tableTarget->DisableOSCacheColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsWriteThroughNull() {
        return this->IsNull(this->tableTarget->WriteThroughColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetWriteThroughNull() {
        this[this->tableTarget->WriteThroughColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsMemoryMappedIoNull() {
        return this->IsNull(this->tableTarget->MemoryMappedIoColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetMemoryMappedIoNull() {
        this[this->tableTarget->MemoryMappedIoColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsFlushTypeNull() {
        return this->IsNull(this->tableTarget->FlushTypeColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetFlushTypeNull() {
        this[this->tableTarget->FlushTypeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsBurstSizeNull() {
        return this->IsNull(this->tableTarget->BurstSizeColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetBurstSizeNull() {
        this[this->tableTarget->BurstSizeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsThinkTimeNull() {
        return this->IsNull(this->tableTarget->ThinkTimeColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetThinkTimeNull() {
        this[this->tableTarget->ThinkTimeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsThroughputNull() {
        return this->IsNull(this->tableTarget->ThroughputColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetThroughputNull() {
        this[this->tableTarget->ThroughputColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsThreadsPerFileNull() {
        return this->IsNull(this->tableTarget->ThreadsPerFileColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetThreadsPerFileNull() {
        this[this->tableTarget->ThreadsPerFileColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsFileSizeNull() {
        return this->IsNull(this->tableTarget->FileSizeColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetFileSizeNull() {
        this[this->tableTarget->FileSizeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsMaxFileSizeNull() {
        return this->IsNull(this->tableTarget->MaxFileSizeColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetMaxFileSizeNull() {
        this[this->tableTarget->MaxFileSizeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsWriteRatioNull() {
        return this->IsNull(this->tableTarget->WriteRatioColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetWriteRatioNull() {
        this[this->tableTarget->WriteRatioColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsParallelAsyncIONull() {
        return this->IsNull(this->tableTarget->ParallelAsyncIOColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetParallelAsyncIONull() {
        this[this->tableTarget->ParallelAsyncIOColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsThreadStrideNull() {
        return this->IsNull(this->tableTarget->ThreadStrideColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetThreadStrideNull() {
        this[this->tableTarget->ThreadStrideColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsIOPriorityNull() {
        return this->IsNull(this->tableTarget->IOPriorityColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetIOPriorityNull() {
        this[this->tableTarget->IOPriorityColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsWeightNull() {
        return this->IsNull(this->tableTarget->WeightColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetWeightNull() {
        this[this->tableTarget->WeightColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TargetRow::IsTargets_IdNull() {
        return this->IsNull(this->tableTarget->Targets_IdColumn);
    }
    
    inline ::System::Void NewDataSet::TargetRow::SetTargets_IdNull() {
        this[this->tableTarget->Targets_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< XmlProfileParser::NewDataSet::WriteBufferContentRow^  >^  NewDataSet::TargetRow::GetWriteBufferContentRows() {
        if (this->Table->ChildRelations[L"Target_WriteBufferContent"] == nullptr) {
            return gcnew cli::array< XmlProfileParser::NewDataSet::WriteBufferContentRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< XmlProfileParser::NewDataSet::WriteBufferContentRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Target_WriteBufferContent"])));
        }
    }
    
    inline cli::array< XmlProfileParser::NewDataSet::ThreadTargetsRow^  >^  NewDataSet::TargetRow::GetThreadTargetsRows() {
        if (this->Table->ChildRelations[L"Target_ThreadTargets"] == nullptr) {
            return gcnew cli::array< XmlProfileParser::NewDataSet::ThreadTargetsRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< XmlProfileParser::NewDataSet::ThreadTargetsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Target_ThreadTargets"])));
        }
    }
    
    
    inline NewDataSet::WriteBufferContentRow::WriteBufferContentRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableWriteBufferContent = (cli::safe_cast<XmlProfileParser::NewDataSet::WriteBufferContentDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::WriteBufferContentRow::Pattern::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableWriteBufferContent->PatternColumn]));
    }
    inline System::Void NewDataSet::WriteBufferContentRow::Pattern::set(System::String^  value) {
        this[this->tableWriteBufferContent->PatternColumn] = value;
    }
    
    inline System::Int32 NewDataSet::WriteBufferContentRow::WriteBufferContent_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableWriteBufferContent->WriteBufferContent_IdColumn]));
    }
    inline System::Void NewDataSet::WriteBufferContentRow::WriteBufferContent_Id::set(System::Int32 value) {
        this[this->tableWriteBufferContent->WriteBufferContent_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::WriteBufferContentRow::Target_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableWriteBufferContent->Target_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Target_Id\' in table \'WriteBufferContent\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::WriteBufferContentRow::Target_Id::set(System::Int32 value) {
        this[this->tableWriteBufferContent->Target_IdColumn] = value;
    }
    
    inline XmlProfileParser::NewDataSet::TargetRow^  NewDataSet::WriteBufferContentRow::TargetRow::get() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::TargetRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Target_WriteBufferContent"])));
    }
    inline System::Void NewDataSet::WriteBufferContentRow::TargetRow::set(XmlProfileParser::NewDataSet::TargetRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Target_WriteBufferContent"]);
    }
    
    inline ::System::Boolean NewDataSet::WriteBufferContentRow::IsTarget_IdNull() {
        return this->IsNull(this->tableWriteBufferContent->Target_IdColumn);
    }
    
    inline ::System::Void NewDataSet::WriteBufferContentRow::SetTarget_IdNull() {
        this[this->tableWriteBufferContent->Target_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< XmlProfileParser::NewDataSet::RandomDataSourceRow^  >^  NewDataSet::WriteBufferContentRow::GetRandomDataSourceRows() {
        if (this->Table->ChildRelations[L"WriteBufferContent_RandomDataSource"] == nullptr) {
            return gcnew cli::array< XmlProfileParser::NewDataSet::RandomDataSourceRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< XmlProfileParser::NewDataSet::RandomDataSourceRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"WriteBufferContent_RandomDataSource"])));
        }
    }
    
    
    inline NewDataSet::RandomDataSourceRow::RandomDataSourceRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableRandomDataSource = (cli::safe_cast<XmlProfileParser::NewDataSet::RandomDataSourceDataTable^  >(this->Table));
    }
    
    inline System::UInt64 NewDataSet::RandomDataSourceRow::SizeInBytes::get() {
        return (cli::safe_cast<::System::UInt64 >(this[this->tableRandomDataSource->SizeInBytesColumn]));
    }
    inline System::Void NewDataSet::RandomDataSourceRow::SizeInBytes::set(System::UInt64 value) {
        this[this->tableRandomDataSource->SizeInBytesColumn] = value;
    }
    
    inline System::String^  NewDataSet::RandomDataSourceRow::FilePath::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableRandomDataSource->FilePathColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'FilePath\' in table \'RandomDataSource\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::RandomDataSourceRow::FilePath::set(System::String^  value) {
        this[this->tableRandomDataSource->FilePathColumn] = value;
    }
    
    inline System::Int32 NewDataSet::RandomDataSourceRow::WriteBufferContent_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableRandomDataSource->WriteBufferContent_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WriteBufferContent_Id\' in table \'RandomDataSource\' is DBNul" 
L"l.", 
                e));
        }
    }
    inline System::Void NewDataSet::RandomDataSourceRow::WriteBufferContent_Id::set(System::Int32 value) {
        this[this->tableRandomDataSource->WriteBufferContent_IdColumn] = value;
    }
    
    inline XmlProfileParser::NewDataSet::WriteBufferContentRow^  NewDataSet::RandomDataSourceRow::WriteBufferContentRow::get() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::WriteBufferContentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"WriteBufferContent_RandomDataSource"])));
    }
    inline System::Void NewDataSet::RandomDataSourceRow::WriteBufferContentRow::set(XmlProfileParser::NewDataSet::WriteBufferContentRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"WriteBufferContent_RandomDataSource"]);
    }
    
    inline ::System::Boolean NewDataSet::RandomDataSourceRow::IsFilePathNull() {
        return this->IsNull(this->tableRandomDataSource->FilePathColumn);
    }
    
    inline ::System::Void NewDataSet::RandomDataSourceRow::SetFilePathNull() {
        this[this->tableRandomDataSource->FilePathColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::RandomDataSourceRow::IsWriteBufferContent_IdNull() {
        return this->IsNull(this->tableRandomDataSource->WriteBufferContent_IdColumn);
    }
    
    inline ::System::Void NewDataSet::RandomDataSourceRow::SetWriteBufferContent_IdNull() {
        this[this->tableRandomDataSource->WriteBufferContent_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::ThreadTargetsRow::ThreadTargetsRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableThreadTargets = (cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetsDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::ThreadTargetsRow::ThreadTargets_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableThreadTargets->ThreadTargets_IdColumn]));
    }
    inline System::Void NewDataSet::ThreadTargetsRow::ThreadTargets_Id::set(System::Int32 value) {
        this[this->tableThreadTargets->ThreadTargets_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ThreadTargetsRow::Target_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableThreadTargets->Target_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Target_Id\' in table \'ThreadTargets\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ThreadTargetsRow::Target_Id::set(System::Int32 value) {
        this[this->tableThreadTargets->Target_IdColumn] = value;
    }
    
    inline XmlProfileParser::NewDataSet::TargetRow^  NewDataSet::ThreadTargetsRow::TargetRow::get() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::TargetRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Target_ThreadTargets"])));
    }
    inline System::Void NewDataSet::ThreadTargetsRow::TargetRow::set(XmlProfileParser::NewDataSet::TargetRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Target_ThreadTargets"]);
    }
    
    inline ::System::Boolean NewDataSet::ThreadTargetsRow::IsTarget_IdNull() {
        return this->IsNull(this->tableThreadTargets->Target_IdColumn);
    }
    
    inline ::System::Void NewDataSet::ThreadTargetsRow::SetTarget_IdNull() {
        this[this->tableThreadTargets->Target_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< XmlProfileParser::NewDataSet::ThreadTargetRow^  >^  NewDataSet::ThreadTargetsRow::GetThreadTargetRows() {
        if (this->Table->ChildRelations[L"ThreadTargets_ThreadTarget"] == nullptr) {
            return gcnew cli::array< XmlProfileParser::NewDataSet::ThreadTargetRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< XmlProfileParser::NewDataSet::ThreadTargetRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"ThreadTargets_ThreadTarget"])));
        }
    }
    
    
    inline NewDataSet::ThreadTargetRow::ThreadTargetRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableThreadTarget = (cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetDataTable^  >(this->Table));
    }
    
    inline System::UInt32 NewDataSet::ThreadTargetRow::Thread::get() {
        return (cli::safe_cast<::System::UInt32 >(this[this->tableThreadTarget->ThreadColumn]));
    }
    inline System::Void NewDataSet::ThreadTargetRow::Thread::set(System::UInt32 value) {
        this[this->tableThreadTarget->ThreadColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::ThreadTargetRow::Weight::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableThreadTarget->WeightColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Weight\' in table \'ThreadTarget\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ThreadTargetRow::Weight::set(System::UInt32 value) {
        this[this->tableThreadTarget->WeightColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ThreadTargetRow::ThreadTargets_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableThreadTarget->ThreadTargets_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ThreadTargets_Id\' in table \'ThreadTarget\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ThreadTargetRow::ThreadTargets_Id::set(System::Int32 value) {
        this[this->tableThreadTarget->ThreadTargets_IdColumn] = value;
    }
    
    inline XmlProfileParser::NewDataSet::ThreadTargetsRow^  NewDataSet::ThreadTargetRow::ThreadTargetsRow::get() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::ThreadTargetsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"ThreadTargets_ThreadTarget"])));
    }
    inline System::Void NewDataSet::ThreadTargetRow::ThreadTargetsRow::set(XmlProfileParser::NewDataSet::ThreadTargetsRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"ThreadTargets_ThreadTarget"]);
    }
    
    inline ::System::Boolean NewDataSet::ThreadTargetRow::IsWeightNull() {
        return this->IsNull(this->tableThreadTarget->WeightColumn);
    }
    
    inline ::System::Void NewDataSet::ThreadTargetRow::SetWeightNull() {
        this[this->tableThreadTarget->WeightColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ThreadTargetRow::IsThreadTargets_IdNull() {
        return this->IsNull(this->tableThreadTarget->ThreadTargets_IdColumn);
    }
    
    inline ::System::Void NewDataSet::ThreadTargetRow::SetThreadTargets_IdNull() {
        this[this->tableThreadTarget->ThreadTargets_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::AffinityRow::AffinityRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableAffinity = (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::AffinityRow::Affinity_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableAffinity->Affinity_IdColumn]));
    }
    inline System::Void NewDataSet::AffinityRow::Affinity_Id::set(System::Int32 value) {
        this[this->tableAffinity->Affinity_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::AffinityRow::TimeSpan_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableAffinity->TimeSpan_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TimeSpan_Id\' in table \'Affinity\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::AffinityRow::TimeSpan_Id::set(System::Int32 value) {
        this[this->tableAffinity->TimeSpan_IdColumn] = value;
    }
    
    inline XmlProfileParser::NewDataSet::TimeSpanRow^  NewDataSet::AffinityRow::TimeSpanRow::get() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::TimeSpanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TimeSpan_Affinity"])));
    }
    inline System::Void NewDataSet::AffinityRow::TimeSpanRow::set(XmlProfileParser::NewDataSet::TimeSpanRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"TimeSpan_Affinity"]);
    }
    
    inline ::System::Boolean NewDataSet::AffinityRow::IsTimeSpan_IdNull() {
        return this->IsNull(this->tableAffinity->TimeSpan_IdColumn);
    }
    
    inline ::System::Void NewDataSet::AffinityRow::SetTimeSpan_IdNull() {
        this[this->tableAffinity->TimeSpan_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< XmlProfileParser::NewDataSet::AffinityAssignmentRow^  >^  NewDataSet::AffinityRow::GetAffinityAssignmentRows() {
        if (this->Table->ChildRelations[L"Affinity_AffinityAssignment"] == nullptr) {
            return gcnew cli::array< XmlProfileParser::NewDataSet::AffinityAssignmentRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< XmlProfileParser::NewDataSet::AffinityAssignmentRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Affinity_AffinityAssignment"])));
        }
    }
    
    inline cli::array< XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  >^  NewDataSet::AffinityRow::GetAffinityGroupAssignmentRows() {
        if (this->Table->ChildRelations[L"Affinity_AffinityGroupAssignment"] == nullptr) {
            return gcnew cli::array< XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Affinity_AffinityGroupAssignment"])));
        }
    }
    
    
    inline NewDataSet::AffinityAssignmentRow::AffinityAssignmentRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableAffinityAssignment = (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityAssignmentDataTable^  >(this->Table));
    }
    
    inline System::UInt32 NewDataSet::AffinityAssignmentRow::AffinityAssignment_Column::get() {
        return (cli::safe_cast<::System::UInt32 >(this[this->tableAffinityAssignment->AffinityAssignment_ColumnColumn]));
    }
    inline System::Void NewDataSet::AffinityAssignmentRow::AffinityAssignment_Column::set(System::UInt32 value) {
        this[this->tableAffinityAssignment->AffinityAssignment_ColumnColumn] = value;
    }
    
    inline System::Int32 NewDataSet::AffinityAssignmentRow::Affinity_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableAffinityAssignment->Affinity_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Affinity_Id\' in table \'AffinityAssignment\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::AffinityAssignmentRow::Affinity_Id::set(System::Int32 value) {
        this[this->tableAffinityAssignment->Affinity_IdColumn] = value;
    }
    
    inline XmlProfileParser::NewDataSet::AffinityRow^  NewDataSet::AffinityAssignmentRow::AffinityRow::get() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Affinity_AffinityAssignment"])));
    }
    inline System::Void NewDataSet::AffinityAssignmentRow::AffinityRow::set(XmlProfileParser::NewDataSet::AffinityRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Affinity_AffinityAssignment"]);
    }
    
    inline ::System::Boolean NewDataSet::AffinityAssignmentRow::IsAffinity_IdNull() {
        return this->IsNull(this->tableAffinityAssignment->Affinity_IdColumn);
    }
    
    inline ::System::Void NewDataSet::AffinityAssignmentRow::SetAffinity_IdNull() {
        this[this->tableAffinityAssignment->Affinity_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::AffinityGroupAssignmentRow::AffinityGroupAssignmentRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableAffinityGroupAssignment = (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityGroupAssignmentDataTable^  >(this->Table));
    }
    
    inline System::UInt32 NewDataSet::AffinityGroupAssignmentRow::Group::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableAffinityGroupAssignment->GroupColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Group\' in table \'AffinityGroupAssignment\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::AffinityGroupAssignmentRow::Group::set(System::UInt32 value) {
        this[this->tableAffinityGroupAssignment->GroupColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::AffinityGroupAssignmentRow::Processor::get() {
        try {
            return (cli::safe_cast<::System::UInt32 >(this[this->tableAffinityGroupAssignment->ProcessorColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Processor\' in table \'AffinityGroupAssignment\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::AffinityGroupAssignmentRow::Processor::set(System::UInt32 value) {
        this[this->tableAffinityGroupAssignment->ProcessorColumn] = value;
    }
    
    inline System::Int32 NewDataSet::AffinityGroupAssignmentRow::Affinity_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableAffinityGroupAssignment->Affinity_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Affinity_Id\' in table \'AffinityGroupAssignment\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::AffinityGroupAssignmentRow::Affinity_Id::set(System::Int32 value) {
        this[this->tableAffinityGroupAssignment->Affinity_IdColumn] = value;
    }
    
    inline XmlProfileParser::NewDataSet::AffinityRow^  NewDataSet::AffinityGroupAssignmentRow::AffinityRow::get() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::AffinityRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Affinity_AffinityGroupAssignment"])));
    }
    inline System::Void NewDataSet::AffinityGroupAssignmentRow::AffinityRow::set(XmlProfileParser::NewDataSet::AffinityRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Affinity_AffinityGroupAssignment"]);
    }
    
    inline ::System::Boolean NewDataSet::AffinityGroupAssignmentRow::IsGroupNull() {
        return this->IsNull(this->tableAffinityGroupAssignment->GroupColumn);
    }
    
    inline ::System::Void NewDataSet::AffinityGroupAssignmentRow::SetGroupNull() {
        this[this->tableAffinityGroupAssignment->GroupColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::AffinityGroupAssignmentRow::IsProcessorNull() {
        return this->IsNull(this->tableAffinityGroupAssignment->ProcessorColumn);
    }
    
    inline ::System::Void NewDataSet::AffinityGroupAssignmentRow::SetProcessorNull() {
        this[this->tableAffinityGroupAssignment->ProcessorColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::AffinityGroupAssignmentRow::IsAffinity_IdNull() {
        return this->IsNull(this->tableAffinityGroupAssignment->Affinity_IdColumn);
    }
    
    inline ::System::Void NewDataSet::AffinityGroupAssignmentRow::SetAffinity_IdNull() {
        this[this->tableAffinityGroupAssignment->Affinity_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::ETWRow::ETWRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableETW = (cli::safe_cast<XmlProfileParser::NewDataSet::ETWDataTable^  >(this->Table));
    }
    
    inline System::Boolean NewDataSet::ETWRow::Process::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableETW->ProcessColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Process\' in table \'ETW\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::ETWRow::Process::set(System::Boolean value) {
        this[this->tableETW->ProcessColumn] = value;
    }
    
    inline System::Boolean NewDataSet::ETWRow::Thread::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableETW->ThreadColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Thread\' in table \'ETW\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::ETWRow::Thread::set(System::Boolean value) {
        this[this->tableETW->ThreadColumn] = value;
    }
    
    inline System::Boolean NewDataSet::ETWRow::ImageLoad::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableETW->ImageLoadColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ImageLoad\' in table \'ETW\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ETWRow::ImageLoad::set(System::Boolean value) {
        this[this->tableETW->ImageLoadColumn] = value;
    }
    
    inline System::Boolean NewDataSet::ETWRow::DiskIO::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableETW->DiskIOColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DiskIO\' in table \'ETW\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::ETWRow::DiskIO::set(System::Boolean value) {
        this[this->tableETW->DiskIOColumn] = value;
    }
    
    inline System::Boolean NewDataSet::ETWRow::MemoryPageFaults::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableETW->MemoryPageFaultsColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'MemoryPageFaults\' in table \'ETW\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ETWRow::MemoryPageFaults::set(System::Boolean value) {
        this[this->tableETW->MemoryPageFaultsColumn] = value;
    }
    
    inline System::Boolean NewDataSet::ETWRow::MemoryHardFaults::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableETW->MemoryHardFaultsColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'MemoryHardFaults\' in table \'ETW\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ETWRow::MemoryHardFaults::set(System::Boolean value) {
        this[this->tableETW->MemoryHardFaultsColumn] = value;
    }
    
    inline System::Boolean NewDataSet::ETWRow::Network::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableETW->NetworkColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Network\' in table \'ETW\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::ETWRow::Network::set(System::Boolean value) {
        this[this->tableETW->NetworkColumn] = value;
    }
    
    inline System::Boolean NewDataSet::ETWRow::Registry::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableETW->RegistryColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Registry\' in table \'ETW\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ETWRow::Registry::set(System::Boolean value) {
        this[this->tableETW->RegistryColumn] = value;
    }
    
    inline System::Boolean NewDataSet::ETWRow::UsePagedMemory::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableETW->UsePagedMemoryColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'UsePagedMemory\' in table \'ETW\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ETWRow::UsePagedMemory::set(System::Boolean value) {
        this[this->tableETW->UsePagedMemoryColumn] = value;
    }
    
    inline System::Boolean NewDataSet::ETWRow::UsePerfTimer::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableETW->UsePerfTimerColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'UsePerfTimer\' in table \'ETW\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ETWRow::UsePerfTimer::set(System::Boolean value) {
        this[this->tableETW->UsePerfTimerColumn] = value;
    }
    
    inline System::Boolean NewDataSet::ETWRow::UseSystemTimer::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableETW->UseSystemTimerColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'UseSystemTimer\' in table \'ETW\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ETWRow::UseSystemTimer::set(System::Boolean value) {
        this[this->tableETW->UseSystemTimerColumn] = value;
    }
    
    inline System::Boolean NewDataSet::ETWRow::UseCyclesCounter::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableETW->UseCyclesCounterColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'UseCyclesCounter\' in table \'ETW\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ETWRow::UseCyclesCounter::set(System::Boolean value) {
        this[this->tableETW->UseCyclesCounterColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ETWRow::Profile_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableETW->Profile_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Profile_Id\' in table \'ETW\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ETWRow::Profile_Id::set(System::Int32 value) {
        this[this->tableETW->Profile_IdColumn] = value;
    }
    
    inline XmlProfileParser::NewDataSet::ProfileRow^  NewDataSet::ETWRow::ProfileRow::get() {
        return (cli::safe_cast<XmlProfileParser::NewDataSet::ProfileRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Profile_ETW"])));
    }
    inline System::Void NewDataSet::ETWRow::ProfileRow::set(XmlProfileParser::NewDataSet::ProfileRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Profile_ETW"]);
    }
    
    inline ::System::Boolean NewDataSet::ETWRow::IsProcessNull() {
        return this->IsNull(this->tableETW->ProcessColumn);
    }
    
    inline ::System::Void NewDataSet::ETWRow::SetProcessNull() {
        this[this->tableETW->ProcessColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ETWRow::IsThreadNull() {
        return this->IsNull(this->tableETW->ThreadColumn);
    }
    
    inline ::System::Void NewDataSet::ETWRow::SetThreadNull() {
        this[this->tableETW->ThreadColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ETWRow::IsImageLoadNull() {
        return this->IsNull(this->tableETW->ImageLoadColumn);
    }
    
    inline ::System::Void NewDataSet::ETWRow::SetImageLoadNull() {
        this[this->tableETW->ImageLoadColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ETWRow::IsDiskIONull() {
        return this->IsNull(this->tableETW->DiskIOColumn);
    }
    
    inline ::System::Void NewDataSet::ETWRow::SetDiskIONull() {
        this[this->tableETW->DiskIOColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ETWRow::IsMemoryPageFaultsNull() {
        return this->IsNull(this->tableETW->MemoryPageFaultsColumn);
    }
    
    inline ::System::Void NewDataSet::ETWRow::SetMemoryPageFaultsNull() {
        this[this->tableETW->MemoryPageFaultsColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ETWRow::IsMemoryHardFaultsNull() {
        return this->IsNull(this->tableETW->MemoryHardFaultsColumn);
    }
    
    inline ::System::Void NewDataSet::ETWRow::SetMemoryHardFaultsNull() {
        this[this->tableETW->MemoryHardFaultsColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ETWRow::IsNetworkNull() {
        return this->IsNull(this->tableETW->NetworkColumn);
    }
    
    inline ::System::Void NewDataSet::ETWRow::SetNetworkNull() {
        this[this->tableETW->NetworkColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ETWRow::IsRegistryNull() {
        return this->IsNull(this->tableETW->RegistryColumn);
    }
    
    inline ::System::Void NewDataSet::ETWRow::SetRegistryNull() {
        this[this->tableETW->RegistryColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ETWRow::IsUsePagedMemoryNull() {
        return this->IsNull(this->tableETW->UsePagedMemoryColumn);
    }
    
    inline ::System::Void NewDataSet::ETWRow::SetUsePagedMemoryNull() {
        this[this->tableETW->UsePagedMemoryColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ETWRow::IsUsePerfTimerNull() {
        return this->IsNull(this->tableETW->UsePerfTimerColumn);
    }
    
    inline ::System::Void NewDataSet::ETWRow::SetUsePerfTimerNull() {
        this[this->tableETW->UsePerfTimerColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ETWRow::IsUseSystemTimerNull() {
        return this->IsNull(this->tableETW->UseSystemTimerColumn);
    }
    
    inline ::System::Void NewDataSet::ETWRow::SetUseSystemTimerNull() {
        this[this->tableETW->UseSystemTimerColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ETWRow::IsUseCyclesCounterNull() {
        return this->IsNull(this->tableETW->UseCyclesCounterColumn);
    }
    
    inline ::System::Void NewDataSet::ETWRow::SetUseCyclesCounterNull() {
        this[this->tableETW->UseCyclesCounterColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ETWRow::IsProfile_IdNull() {
        return this->IsNull(this->tableETW->Profile_IdColumn);
    }
    
    inline ::System::Void NewDataSet::ETWRow::SetProfile_IdNull() {
        this[this->tableETW->Profile_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::ProfileRowChangeEvent::ProfileRowChangeEvent(XmlProfileParser::NewDataSet::ProfileRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XmlProfileParser::NewDataSet::ProfileRow^  NewDataSet::ProfileRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ProfileRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::TimeSpansRowChangeEvent::TimeSpansRowChangeEvent(XmlProfileParser::NewDataSet::TimeSpansRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XmlProfileParser::NewDataSet::TimeSpansRow^  NewDataSet::TimeSpansRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::TimeSpansRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::TimeSpanRowChangeEvent::TimeSpanRowChangeEvent(XmlProfileParser::NewDataSet::TimeSpanRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XmlProfileParser::NewDataSet::TimeSpanRow^  NewDataSet::TimeSpanRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::TimeSpanRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::TargetsRowChangeEvent::TargetsRowChangeEvent(XmlProfileParser::NewDataSet::TargetsRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XmlProfileParser::NewDataSet::TargetsRow^  NewDataSet::TargetsRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::TargetsRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::TargetRowChangeEvent::TargetRowChangeEvent(XmlProfileParser::NewDataSet::TargetRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XmlProfileParser::NewDataSet::TargetRow^  NewDataSet::TargetRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::TargetRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::WriteBufferContentRowChangeEvent::WriteBufferContentRowChangeEvent(XmlProfileParser::NewDataSet::WriteBufferContentRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XmlProfileParser::NewDataSet::WriteBufferContentRow^  NewDataSet::WriteBufferContentRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::WriteBufferContentRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::RandomDataSourceRowChangeEvent::RandomDataSourceRowChangeEvent(XmlProfileParser::NewDataSet::RandomDataSourceRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XmlProfileParser::NewDataSet::RandomDataSourceRow^  NewDataSet::RandomDataSourceRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::RandomDataSourceRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::ThreadTargetsRowChangeEvent::ThreadTargetsRowChangeEvent(XmlProfileParser::NewDataSet::ThreadTargetsRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XmlProfileParser::NewDataSet::ThreadTargetsRow^  NewDataSet::ThreadTargetsRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ThreadTargetsRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::ThreadTargetRowChangeEvent::ThreadTargetRowChangeEvent(XmlProfileParser::NewDataSet::ThreadTargetRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XmlProfileParser::NewDataSet::ThreadTargetRow^  NewDataSet::ThreadTargetRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ThreadTargetRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::AffinityRowChangeEvent::AffinityRowChangeEvent(XmlProfileParser::NewDataSet::AffinityRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XmlProfileParser::NewDataSet::AffinityRow^  NewDataSet::AffinityRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::AffinityRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::AffinityAssignmentRowChangeEvent::AffinityAssignmentRowChangeEvent(XmlProfileParser::NewDataSet::AffinityAssignmentRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XmlProfileParser::NewDataSet::AffinityAssignmentRow^  NewDataSet::AffinityAssignmentRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::AffinityAssignmentRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::AffinityGroupAssignmentRowChangeEvent::AffinityGroupAssignmentRowChangeEvent(XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XmlProfileParser::NewDataSet::AffinityGroupAssignmentRow^  NewDataSet::AffinityGroupAssignmentRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::AffinityGroupAssignmentRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::ETWRowChangeEvent::ETWRowChangeEvent(XmlProfileParser::NewDataSet::ETWRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XmlProfileParser::NewDataSet::ETWRow^  NewDataSet::ETWRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ETWRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
